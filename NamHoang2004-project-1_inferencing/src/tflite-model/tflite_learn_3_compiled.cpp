/*
 * Copyright (c) 2024 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://docs.edgeimpulse.com/page/terms-of-service) or Enterprise Terms of
 * Service (https://docs.edgeimpulse.com/page/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 31.12.2024 12:13:58

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(x) __attribute__((aligned(x)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#if defined(EI_MODEL_SECTION) && (defined(__GNUC__) || defined(__clang__))
#define MODEL_SECTION(X) __attribute__((section(STRINGIZE_VALUE_OF(X))))
#else
#define MODEL_SECTION(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 74464;
#else
constexpr int kTensorArenaSize = 73440;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_PAD, OP_ADD, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<4, int> tensor_dimension0 = { 4, { 1,48,48,3 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data2[4] = { 12321, -20564, -19820, -17888, };
const TfArray<1, int> tensor_dimension2 = { 1, { 4 } };
const TfArray<4, float> quant2_scale = { 4, { 0.00029045544215478003, 0.00022324849851429462, 0.00022863986669108272, 0.00026873048045672476, } };
const TfArray<4, int> quant2_zero = { 4, { 0,0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data3[4*1*1*32] = { 
  /* [0][0][][] */ 23,-16,-89,-50,127,-25,8,-51,123,-18,78,68,-48,-36,36,-32,7,-72,-99,41,-35,38,-27,66,-4,-6,10,42,117,-44,45,24, 
  /* [1][0][][] */ 25,65,-85,-11,-28,38,118,44,-39,-56,-93,-2,88,-52,71,-110,127,-125,-4,-41,23,-73,-68,1,-43,-113,60,-45,-83,-112,-37,-60, 
  /* [2][0][][] */ -61,102,13,87,-19,-26,77,30,-68,-91,97,-92,-96,85,-111,94,52,72,111,-89,3,36,-51,-13,30,-24,86,-127,-72,9,69,42, 
  /* [3][0][][] */ 74,-75,82,-3,-1,93,39,-6,5,-110,23,92,55,-14,-127,-5,99,-92,77,13,-118,-24,-18,-7,67,-23,-84,65,-96,104,25,46, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 4,1,1,32 } };
const TfArray<4, float> quant3_scale = { 4, { 0.0037937469314783812, 0.0029159318655729294, 0.0029863505624234676, 0.003509989008307457, } };
const TfArray<4, int> quant3_zero = { 4, { 0,0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data4[32] = { -33, -528, -659, -303, -1096, -123, -477, -304, -394, -1106, -340, 156, -107, 64, 1024, -1020, -67, -42, -215, -887, -342, 118, -1323, -907, -355, -1119, -832, -1122, 1401, 99, -986, -817, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const TfArray<32, float> quant4_scale = { 32, { 5.9197835071245208e-05, 4.7229521442204714e-05, 5.0292554078623652e-05, 5.7862314861267805e-05, 5.0786082283593714e-05, 4.8981684813043103e-05, 5.4040767281549051e-05, 4.5103428419679403e-05, 4.8884448915487155e-05, 5.0337330321781337e-05, 4.7137426008703187e-05, 5.1543796871555969e-05, 4.9586418754188344e-05, 5.4023163102101535e-05, 5.2534895075950772e-05, 4.9158948968397453e-05, 4.3242598621873185e-05, 5.7365159591427073e-05, 5.5050397349987179e-05, 5.7775785535341129e-05, 5.4465723223984241e-05, 5.8999379689339548e-05, 5.3453310101758689e-05, 5.6087559642037377e-05, 5.1853014156222343e-05, 5.0260900025023147e-05, 4.3278836528770626e-05, 4.9580201448407024e-05, 6.7430468334350735e-05, 5.3603209380526096e-05, 4.8310310376109555e-05, 5.7982073485618457e-05, } };
const TfArray<32, int> quant4_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data5[32*1*1*96] = { 
  /* [0][0][][] */ -42,-30,78,-3,30,-37,-67,-91,32,-71,-80,-5,1,2,-23,30,-44,-20,-83,-7,-63,-80,-1,74,-94,28,58,-43,59,21,-13,-58,61,-44,-77,55,-87,-46,-78,17,57,-75,-71,77,45,-71,83,-25,11,-36,-45,70,-94,-36,-53,96,-27,14,69,-95,-71,54,-17,42,-15,11,45,65,10,70,17,-127,74,-69,27,59,-79,4,-49,9,39,4,56,-3,-42,-25,-74,89,5,95,-11,-86,-14,7,37,2, 
  /* [1][0][][] */ -41,42,-87,-14,-115,36,18,23,73,-73,-114,59,88,-13,7,16,81,-43,68,76,-30,-21,24,4,-17,-47,-45,113,2,1,100,-53,83,104,-5,39,24,53,11,-71,-66,10,-24,-100,-42,32,-40,-57,-12,-110,127,44,34,91,-105,-29,47,94,30,57,-31,52,-70,-51,-60,12,52,42,89,25,33,25,-111,92,-48,29,85,-57,-48,72,-73,69,-22,-91,19,96,-69,-78,85,66,64,21,98,103,19,-2, 
  /* [2][0][][] */ 9,9,-37,36,-56,-58,75,39,-127,45,-69,119,115,-42,52,-108,-38,-8,26,85,-94,-15,91,17,-61,86,102,25,-40,103,47,51,-108,-43,-125,-113,-67,59,42,-60,-124,-103,-2,-23,-92,84,-45,-101,47,72,69,-91,-42,28,49,5,-109,64,-30,-29,-27,69,-61,64,42,30,39,42,-83,50,15,-93,50,-89,-2,33,-17,-25,-3,-26,20,-87,-12,-55,-17,-114,-53,-24,73,89,-1,-35,-67,-105,-33,-67, 
  /* [3][0][][] */ 12,-4,29,-41,-100,42,-90,5,25,28,28,15,95,77,38,-8,76,74,-13,-2,97,-71,-50,-91,-59,-127,-55,95,46,-47,65,-14,-29,-50,-7,-16,-64,-54,21,1,-43,-64,-83,-5,24,15,-81,-75,55,-44,50,2,93,-2,62,-77,-68,-80,-83,-52,-54,22,-62,75,-3,-35,-51,-63,-31,-64,22,89,28,-103,26,-35,45,71,68,-56,-68,-79,47,76,16,20,-41,-92,-50,27,-2,-104,86,-57,-92,21, 
  /* [4][0][][] */ 20,60,-24,23,21,21,3,-11,30,49,-29,24,-1,-56,-35,-70,-47,-29,-16,41,64,-100,48,-2,-24,-28,29,-72,-60,59,-82,-63,31,71,-12,-113,-66,-31,-108,19,-67,-76,-85,-101,3,65,5,24,-7,-8,-37,-88,-39,11,-98,-12,8,-98,0,-9,-21,-87,-59,-84,-63,26,-22,-53,52,-108,-103,-97,-68,-12,57,22,79,-44,-29,-71,-19,-58,-112,-39,-24,33,54,-5,-127,-88,18,70,-3,52,-112,-39, 
  /* [5][0][][] */ 77,-102,69,75,-34,-84,27,23,89,-121,-4,-53,-40,78,34,18,47,57,-124,127,23,44,6,-24,-109,-31,-5,-87,44,78,3,-103,-36,-11,-46,-12,-113,-30,-10,20,-82,-60,31,71,-33,6,22,-56,-107,125,-4,38,-5,5,47,-2,70,-22,-60,-53,14,-59,50,-67,-38,81,-25,27,48,3,58,-91,-46,52,-25,-71,26,-52,10,61,92,14,34,79,-77,70,-26,32,56,-80,111,39,-34,18,84,-70, 
  /* [6][0][][] */ 17,-53,84,62,-127,-53,-3,46,-13,-82,-3,-72,40,42,87,-118,19,-4,-5,94,-60,-100,73,40,-85,-76,-3,-45,-23,-64,30,-78,-65,-103,-22,-101,-26,24,-107,64,59,37,12,-32,-99,68,-86,-46,-79,25,-34,-53,38,-48,73,-8,7,-39,-76,69,-68,-19,56,-54,-85,38,74,-32,59,-7,-90,-8,34,-56,-85,-42,-52,-95,-47,-31,22,-44,50,-25,-65,-74,-53,-89,67,70,78,-9,-42,-46,59,-24, 
  /* [7][0][][] */ 121,73,-48,-49,-122,105,-27,7,105,14,-103,2,73,-73,39,34,37,14,6,108,63,24,-12,70,-108,81,40,58,-83,127,-14,38,45,29,71,105,-117,85,1,-33,87,-72,81,59,42,-2,92,-115,50,-60,-92,-62,-17,95,12,51,122,-95,-29,-75,27,-46,91,-90,-61,-68,53,25,-118,25,65,90,81,27,60,46,-45,42,-102,43,85,-38,8,-61,78,32,-115,77,86,4,75,52,-36,-29,-2,-56, 
  /* [8][0][][] */ -8,10,-45,-88,100,24,-72,-22,-8,18,33,75,-26,-59,-82,-52,-66,64,-75,26,3,-30,62,92,-71,75,24,52,-62,-9,-98,87,58,-51,29,-25,99,-14,10,59,58,74,-115,-110,-23,-42,-37,94,4,-102,-82,-13,-73,-37,-30,-122,24,81,-80,95,70,46,22,67,-46,-43,-26,78,-48,24,12,-25,53,42,-1,12,-68,86,65,45,21,62,-127,-95,12,26,55,-35,9,-49,-79,97,-97,-119,-56,30, 
  /* [9][0][][] */ -24,-14,72,14,96,-72,-67,-127,10,73,-34,20,4,-93,-113,-48,-19,-25,-53,-32,-22,60,-118,-115,72,-33,-36,-3,-35,-51,-101,67,27,-25,-3,15,-90,-12,-55,-63,15,-83,21,-104,43,-8,-115,20,18,14,-95,-15,95,-89,-85,63,49,-72,12,-29,-101,65,99,-90,-73,-21,64,15,-7,62,69,-103,-19,44,-64,-107,-37,-127,-59,65,3,-3,61,0,-63,-107,6,-38,60,2,-51,120,69,-26,28,-55, 
  /* [10][0][][] */ -88,61,96,-110,-35,105,88,-3,-4,23,-24,-43,123,68,-65,-2,-28,82,-62,-50,12,17,51,-72,-21,22,-103,-81,-31,95,-110,-74,71,70,88,58,-29,-21,-36,-21,-64,127,-108,-61,-117,-65,-30,-97,-17,17,72,1,79,-1,-64,-52,-88,-10,42,-74,32,73,66,55,91,-81,-98,-64,3,-14,-66,-27,91,14,-115,110,18,59,51,-10,43,18,82,85,-115,23,69,4,59,-16,-1,-18,-12,-46,-58,-58, 
  /* [11][0][][] */ 57,28,-5,66,50,21,41,16,71,91,-71,98,-51,-89,30,-69,-37,-83,38,55,39,63,25,-90,-117,-57,-13,65,78,-3,33,-45,-71,-62,26,61,-47,76,-50,-61,-18,78,-60,18,-21,-40,-88,-72,70,112,39,55,-86,-101,37,51,-93,-74,-9,-82,-87,88,94,20,-29,63,-48,16,49,39,-78,-73,39,79,-64,46,-62,33,-41,52,-86,-35,-42,-44,45,-57,6,-44,-67,4,13,-127,-86,-11,-45,-52, 
  /* [12][0][][] */ 27,63,-58,6,7,34,-30,41,-77,57,-10,-11,-72,4,49,-102,-88,-43,-81,-34,19,-13,6,84,-92,-24,82,-127,74,43,-38,92,-83,-56,-25,23,-19,-52,-11,44,105,9,-101,-31,-17,-77,-26,103,-49,-75,-96,109,-19,14,-54,92,-22,-110,19,44,15,96,31,4,127,19,-46,115,36,79,-20,24,36,83,3,-21,-44,22,-103,-103,-52,37,47,-9,-33,40,15,90,-83,-81,89,29,72,-13,51,50, 
  /* [13][0][][] */ 58,-22,94,43,62,82,35,34,33,-62,-28,-7,108,82,32,-65,-79,-39,-24,9,85,-48,106,-70,-106,-23,11,44,-44,-46,88,31,46,75,-44,60,-53,-43,15,25,-72,83,-39,24,-50,44,-28,-45,35,101,6,-99,-50,18,75,-65,-13,46,-1,-76,15,92,-93,38,-68,-69,-104,42,-27,-4,102,33,-54,30,-82,-19,-47,64,38,-59,26,-55,112,43,-77,-112,76,86,24,-57,-71,34,127,-40,44,1, 
  /* [14][0][][] */ -26,-73,89,80,120,11,18,-98,-43,-23,92,121,-34,-55,-57,-21,-18,-24,14,14,-43,56,27,81,-32,-44,1,37,-72,-108,-58,30,114,-10,20,-1,114,104,26,-59,12,-52,29,85,62,-91,67,-43,117,26,49,50,99,-10,-9,5,-45,19,64,127,-22,-32,5,62,-22,5,97,-66,-63,-79,-52,83,31,72,69,-40,49,-57,74,40,54,22,-113,-42,-82,-49,-51,90,84,11,91,-10,76,66,-27,63, 
  /* [15][0][][] */ -9,-46,-43,41,105,-71,31,-110,29,-25,-86,45,122,-18,-101,-120,59,-8,-54,-1,24,-5,43,73,45,36,15,115,11,91,37,-104,-8,-15,-79,-28,-75,75,70,-82,-9,81,-64,-45,-1,-90,-61,-93,-26,-61,25,6,-51,-110,-66,-27,42,23,-10,75,-25,-60,-23,122,-55,64,-84,-20,-66,-15,86,-68,47,-29,27,-110,30,28,70,47,-92,82,-107,-73,-127,-54,-102,13,57,38,-112,-59,42,78,-114,79, 
  /* [16][0][][] */ -59,3,102,-57,-25,114,-50,40,48,55,-108,78,-30,-41,-47,-81,103,83,36,100,120,78,-41,52,-65,65,-57,66,-96,64,45,11,-89,79,73,62,-41,60,-51,-66,24,-46,74,87,63,102,99,-16,-58,-82,2,121,-61,124,80,71,23,61,45,-1,127,99,53,76,55,9,-37,99,39,105,-44,-11,29,88,67,82,11,93,-106,-16,19,-94,82,16,13,105,90,6,86,21,-6,81,74,-21,-67,31, 
  /* [17][0][][] */ 4,-86,48,46,-11,-32,-49,-69,32,-39,53,66,123,43,-105,72,40,37,106,89,-57,-7,26,-39,35,15,-51,52,120,-40,-30,38,7,-30,30,-1,-1,51,-51,-28,-94,-6,-24,-12,-21,-5,41,-83,89,93,20,8,26,45,57,-86,-40,102,-54,-49,22,-45,35,102,-70,-63,38,-87,-40,-11,125,56,50,-124,-63,80,127,-4,37,-25,4,29,-34,-62,-92,36,87,-8,41,45,-51,-55,-20,102,-4,6, 
  /* [18][0][][] */ -103,79,75,-56,-48,-127,-86,5,-14,66,-91,-34,-44,34,44,-64,13,-23,43,-39,87,-40,10,-64,-18,-88,-20,87,20,9,-2,27,46,-21,-64,-79,-29,27,-19,46,-28,-9,-56,-10,-88,7,7,0,19,-35,49,20,-82,-13,-16,80,-18,24,-32,-95,82,68,5,20,-76,-98,-30,80,37,-83,-69,91,-73,-43,-70,-87,35,37,-4,-68,-43,5,-5,-58,77,-28,51,46,-75,-60,-31,57,90,-14,26,-44, 
  /* [19][0][][] */ -5,27,37,11,82,-81,53,51,51,-13,4,-27,-42,6,-60,38,36,-96,127,23,-36,41,-58,-8,53,-78,2,-69,-88,-61,-67,52,39,-79,5,40,-1,-70,-5,-92,15,-104,-79,32,-83,8,40,-87,-39,4,-51,15,16,-7,-16,-28,2,118,23,-32,20,-61,60,18,-21,-16,-37,-20,-27,21,52,-57,-1,-112,-68,-75,-36,-98,-7,64,24,-66,-43,42,-82,-24,-7,-13,46,4,-21,77,-44,65,33,-55, 
  /* [20][0][][] */ 49,69,40,73,-13,64,6,104,16,10,-66,-15,7,84,27,-59,-49,-38,-10,-44,22,-42,-66,-63,59,-88,-96,24,3,-21,-25,125,70,73,-28,65,20,-10,49,-80,-57,-23,-46,-82,-9,-31,-14,88,40,-120,-71,36,42,127,24,9,107,100,60,71,106,-63,-21,-35,50,-50,-48,28,-45,-22,-58,84,-66,-26,23,6,72,53,79,100,66,14,65,-2,47,93,-6,62,14,73,12,112,48,14,14,55, 
  /* [21][0][][] */ 50,33,77,-38,127,-56,80,-9,33,-76,-55,59,41,30,-43,-31,-75,3,46,-6,80,-7,51,-46,37,-80,2,81,41,9,-13,-46,-7,0,-32,-104,89,48,-107,3,-21,18,26,-29,-86,-74,-77,64,-18,-35,23,39,55,30,-81,-1,-32,56,12,98,59,-36,-29,9,24,28,5,-27,-58,16,79,82,52,3,24,76,-61,-24,73,73,29,102,41,-56,17,-86,55,-43,-64,50,98,-87,-15,-46,43,3, 
  /* [22][0][][] */ -3,-75,-76,-50,91,-64,53,14,-45,40,-88,-65,92,-120,-125,-92,-1,37,-90,-25,39,-91,-5,-6,52,30,-58,107,-62,-55,-84,-123,6,20,44,-21,-29,-43,-80,-58,-29,-37,-28,46,13,-124,45,-49,-83,-48,25,-42,-42,-102,-72,-7,-44,-48,4,-53,72,-95,-92,-60,-81,-14,-124,-12,123,58,-46,-35,-78,-9,22,-106,54,-72,19,47,52,-97,-95,-127,31,37,52,-53,-80,-5,-35,63,-18,-13,-59,112, 
  /* [23][0][][] */ 24,-91,-20,22,127,-112,-19,-94,21,-78,44,33,-12,-105,-9,-48,45,-49,-79,46,46,-85,58,-49,-20,-36,39,-8,29,10,31,2,-54,11,-8,-1,53,-29,-47,-17,-103,-23,-16,-106,-78,-91,64,-1,37,-113,-51,-66,46,-68,-69,41,-85,-21,42,17,-111,-95,-69,-36,50,8,-112,-106,27,-35,65,-80,-27,-51,-56,-95,11,-38,50,66,-63,-60,-9,-104,49,-18,68,-37,-94,9,57,15,56,-64,-33,42, 
  /* [24][0][][] */ -98,-57,-96,-99,-112,-114,-59,-119,42,74,67,34,98,60,-39,-127,-79,36,-11,-54,82,-73,-59,-35,-2,-27,60,38,74,13,-8,-67,-30,-3,35,-2,-63,-81,13,-24,-63,-87,81,-10,0,-33,29,45,-103,-46,-34,11,36,44,54,-58,-19,46,-6,-16,87,-23,18,75,-99,81,-45,-77,-116,38,-60,-23,-29,10,55,75,68,-77,-91,-98,-71,-85,-43,-102,-6,52,-22,-82,23,-87,3,-61,-18,-10,-74,20, 
  /* [25][0][][] */ -52,-75,-95,-36,105,-37,-115,19,12,-123,-60,-8,34,-28,-121,-46,-90,25,57,-94,31,45,-37,-77,42,-21,-116,6,38,-54,6,108,53,-121,61,35,57,-79,5,13,-99,56,-65,-24,58,8,29,4,-116,110,-88,-24,10,5,-28,-18,-45,17,-85,37,75,10,68,12,24,38,-42,21,-47,20,-48,-124,2,-90,34,-8,35,35,-14,-9,16,16,-68,43,-92,-68,-116,-105,-47,-60,121,18,-127,0,4,-52, 
  /* [26][0][][] */ 75,-97,-53,-32,-98,-29,-49,2,-113,-86,88,41,-39,-33,-31,-67,78,27,-35,-110,28,49,96,-30,5,31,4,42,-6,-11,-75,10,11,-46,-123,-80,-97,82,-38,93,-110,121,58,24,-89,78,-47,83,-8,0,18,89,40,-33,-44,-89,119,75,41,10,24,-127,64,17,121,-50,-81,59,-92,86,121,121,92,-80,-106,-10,47,-114,-115,18,-42,87,104,-53,63,-10,-39,-9,-70,94,-17,33,-32,117,28,101, 
  /* [27][0][][] */ -15,-17,-79,-112,-127,-22,-84,-39,12,61,8,-117,-34,24,46,-49,32,-38,68,-95,-105,-15,-49,-45,-115,15,-118,-27,32,52,-53,-32,28,35,-103,-99,-102,-80,-121,52,-106,-10,0,-10,61,-3,34,65,53,86,27,-89,-49,-98,-30,-54,65,-45,-123,-92,-74,-77,-54,22,10,-64,-121,67,31,-16,-126,-18,28,-69,-32,-100,18,-81,51,64,49,-48,76,-73,-88,-96,-53,3,-66,-28,-53,-67,24,-9,53,24, 
  /* [28][0][][] */ 102,5,77,74,-2,-52,-24,-32,13,-58,82,96,-51,-31,18,127,90,91,7,33,-17,56,-29,-8,-12,62,-29,-19,-22,-80,14,-14,-28,21,101,50,60,-61,-13,63,91,65,-47,55,-51,4,43,72,62,-44,-68,-36,-5,16,20,16,36,28,102,92,-11,-4,-85,-2,45,75,33,79,-39,21,-17,1,73,29,5,-34,-84,2,-16,70,-31,-5,53,-14,59,-51,100,-46,-65,-41,-13,-53,-20,65,-79,-27, 
  /* [29][0][][] */ 16,17,63,-79,-101,2,-81,-29,39,-41,-97,-54,108,-109,-39,-41,-67,101,-3,-18,-65,-19,40,16,-56,33,-17,-6,-62,28,62,-15,-3,-18,-63,-67,-2,66,-46,51,22,62,-42,45,-16,72,-59,-48,-20,33,51,-74,42,-97,125,32,-120,25,-16,58,-96,93,-99,-37,-68,-29,49,47,53,-68,32,-78,108,41,16,32,127,-53,-18,-13,6,-67,-7,-74,40,66,-3,97,-29,79,77,24,-108,-4,12,42, 
  /* [30][0][][] */ 2,-82,-80,8,-102,21,-82,-36,79,-14,-26,-37,-89,-10,27,-9,-25,7,82,-114,23,-114,-123,-12,-123,-3,-87,82,-30,-96,-101,-17,-74,-87,-123,-68,2,-40,-26,-4,54,-93,-36,66,67,-63,67,28,-62,66,15,-92,83,-69,-34,66,-72,-49,-72,-72,-112,-2,-88,-44,-96,-102,-108,56,-77,73,42,-54,-80,69,18,-100,-52,-85,-91,-60,2,2,-93,-31,-119,1,-118,75,-48,-127,45,48,-52,-2,6,-86, 
  /* [31][0][][] */ 40,-102,11,79,-3,13,-52,-105,-13,-50,-72,-77,77,-127,-51,73,-70,-43,-6,-2,30,14,-43,60,13,-106,36,3,-91,-89,25,61,30,18,-74,-36,48,-36,-82,-86,31,-54,-52,0,-10,-56,-42,-14,51,-15,42,-59,-124,-29,-83,-2,-119,21,-32,58,-7,-38,31,-27,15,69,-46,-69,17,-116,-125,28,-67,-64,-30,-13,-58,-57,25,74,-69,-52,20,58,28,54,-86,-3,-21,-41,-103,-72,22,91,-37,-44, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 32,1,1,96 } };
const TfArray<32, float> quant5_scale = { 32, { 0.0025159078650176525, 0.0020072546321898699, 0.0021374335046857595, 0.0024591484107077122, 0.0021584085188806057, 0.002081721555441618, 0.0022967325057834387, 0.0019168956205248833, 0.0020775890443474054, 0.0021393364295363426, 0.0020033405162394047, 0.0021906113252043724, 0.002107422798871994, 0.0022959844209253788, 0.0022327329497784376, 0.0020892552565783262, 0.0018378103850409389, 0.0024380192626267672, 0.0023396417964249849, 0.0024554708506911993, 0.0023147931788116693, 0.0025074735749512911, 0.0022717656102031469, 0.0023837212938815355, 0.0022037529852241278, 0.0021360882092267275, 0.0018393504433333874, 0.0021071585360914469, 0.0028657948132604361, 0.0022781363222748041, 0.0020531881600618362, 0.0024642380885779858, } };
const TfArray<32, int> quant5_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data6[96] = { -3026, 3740, 13690, 3009, -4928, -4777, 22461, 2339, 3235, -2153, 30254, -760, -14114, 2848, 13350, 8240, 17555, 7346, -5362, -5743, 4811, 39812, 18770, 22625, 1819, 1062, 5976, 4105, 2318, -5284, 11253, -3342, -421, 5842, 151, 1386, 13365, 8009, -2751, 5247, 8697, 5229, 6371, 12571, 5984, 7601, 1959, 10657, 5660, -8666, -6915, 569, -521, -1739, 2714, 47, 259, -1004, -6332, 11525, -1300, 2266, -1632, -3584, -4438, 6976, 25613, 1949, -2770, 1115, 1164, 2696, 3043, -1092, 619, 15777, -569, 19231, 19138, -1388, 6591, 2151, -579, 1456, 11229, 10122, 4804, 1632, 7860, 9105, -373, -9149, 917, -2485, -2864, -3934, };
const TfArray<1, int> tensor_dimension6 = { 1, { 96 } };
const TfArray<96, float> quant6_scale = { 96, { 0.00023232147214002907, 0.00041106250137090683, 0.0001741151645546779, 0.0002626958885230124, 0.00019163542310707271, 0.00031440559541806579, 0.00014600875147152692, 0.00028804398607462645, 0.00017953856149688363, 0.00033015021472238004, 6.5880005422513932e-05, 0.00017231274978257716, 0.0001754302647896111, 0.00098043272737413645, 0.000230131990974769, 0.00014827889390289783, 0.00010505814134376124, 0.00019401450117584318, 0.00038147356826812029, 0.00029944567359052598, 0.00012085357593605295, 6.8203102273400873e-05, 0.00015962531324476004, 7.2732684202492237e-05, 0.00010659982945071533, 0.00042324772221036255, 0.00048708074609749019, 0.00024769353331066668, 0.00018997129518538713, 0.00036134224501438439, 0.00012917457206640393, 0.00022607487335335463, 0.00016942183719947934, 0.00018863000150304288, 0.00025076913880184293, 0.00019960997451562434, 0.00014306601951830089, 0.00012018834240734577, 0.00023582407447975129, 0.00033099611755460501, 0.0001478475023759529, 0.00048471614718437195, 0.00023402736405842006, 0.00018494606774765998, 0.00031923357164487243, 0.00012902190792374313, 0.00025685853324830532, 0.00020385357493069023, 0.00023961649276316166, 0.00014431575255002826, 0.00022119806089904159, 0.00017413815658073872, 0.00048658938612788916, 0.00015921490557957441, 0.00028236425714567304, 0.0002328176487935707, 0.0003846719628199935, 0.0002896922524087131, 0.00025413266848772764, 0.00015296789933927357, 0.0005726800300180912, 0.00028005614876747131, 0.00017656314594205469, 0.00023045171110425144, 0.00042317641782574356, 0.00027044065063819289, 8.4358885942492634e-05, 0.0001957387721631676, 0.00042878056410700083, 0.00027893853257410228, 0.00029411213472485542, 0.00019644267740659416, 0.00045024900464341044, 0.00038535744533874094, 0.00022007168445270509, 0.000136662827571854, 0.00023077736841514707, 9.7313386504538357e-05, 9.4743452791590244e-05, 0.00017287126684095711, 0.00020911789033561945, 0.00013859260070603341, 0.00011598954006331041, 0.00018483710300642997, 0.00015866124886088073, 0.0002330235147383064, 0.00049271737225353718, 0.00019161698583047837, 8.5262698121368885e-05, 0.00021328109141904861, 0.00025243987329304218, 0.00022171241289470345, 0.00025060208281502128, 0.00044205132871866226, 0.00022574244940187782, 0.00012030154903186485, } };
const TfArray<96, int> quant6_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data7[96*1*1*16] = { 
  /* [0][0][][] */ -52,40,-35,-127,-23,-37,-5,-75,-30,-8,29,69,-7,-26,24,72, 
  /* [1][0][][] */ -34,28,-38,-18,-6,-20,35,-85,80,49,-37,1,27,-10,54,-127, 
  /* [2][0][][] */ 37,-30,-64,100,27,-15,-57,-72,105,-81,-49,-28,7,127,-113,66, 
  /* [3][0][][] */ 16,-59,-1,-43,-2,-21,15,31,103,10,38,31,-33,94,-14,127, 
  /* [4][0][][] */ -127,27,-2,42,-12,-34,-52,79,109,-17,16,-56,-108,78,-60,106, 
  /* [5][0][][] */ 53,99,114,-18,13,42,-107,63,-57,127,-81,-42,58,-23,-116,53, 
  /* [6][0][][] */ 64,-106,92,-84,26,-37,-17,107,-49,-55,43,-49,-34,127,-24,113, 
  /* [7][0][][] */ 58,127,-2,-31,67,-5,-39,-80,75,61,-73,6,70,-35,43,33, 
  /* [8][0][][] */ 20,-102,-4,-73,14,-84,17,-67,17,67,43,-41,21,127,65,71, 
  /* [9][0][][] */ -2,-21,12,127,56,7,21,-89,-68,93,42,-40,-3,-67,-28,-25, 
  /* [10][0][][] */ -95,65,-29,-127,49,76,63,126,81,-6,124,-6,-115,-79,18,1, 
  /* [11][0][][] */ -7,34,47,2,112,-44,118,-35,-55,58,-12,33,-28,127,-59,-43, 
  /* [12][0][][] */ 50,-33,-122,25,12,-29,24,67,1,92,-103,-127,10,83,-40,-9, 
  /* [13][0][][] */ -6,5,-7,5,-1,-127,-25,28,10,0,6,-12,11,-7,2,17, 
  /* [14][0][][] */ 36,-23,62,-36,30,-18,-127,-83,-25,-16,-14,27,44,-59,5,-1, 
  /* [15][0][][] */ -78,31,-71,-69,-37,-21,110,1,-26,102,127,50,-3,47,104,1, 
  /* [16][0][][] */ 19,63,125,127,-11,0,76,90,-84,56,-103,25,31,4,19,-32, 
  /* [17][0][][] */ -23,-119,-3,47,-49,-6,-47,29,-127,-51,20,-71,-11,52,42,-21, 
  /* [18][0][][] */ -6,63,26,31,54,25,31,16,62,32,-9,-19,11,127,76,5, 
  /* [19][0][][] */ 32,-15,58,6,126,3,-83,-30,-71,-66,-83,-127,-21,9,-11,12, 
  /* [20][0][][] */ 48,-2,-33,-15,-12,-127,-25,0,-20,43,-90,-4,23,-20,42,5, 
  /* [21][0][][] */ 59,7,50,-12,-47,11,6,107,-43,-127,63,94,4,97,59,79, 
  /* [22][0][][] */ 19,9,-16,127,-15,-20,46,51,-10,-1,-46,-16,-9,28,0,10, 
  /* [23][0][][] */ 30,25,127,-77,54,41,-18,31,-5,-47,26,10,25,-24,-118,48, 
  /* [24][0][][] */ -127,75,15,-3,2,123,-2,-21,6,39,113,-31,-123,7,95,-63, 
  /* [25][0][][] */ 27,14,-2,45,26,13,88,-72,13,-127,-4,-37,-26,-23,-3,5, 
  /* [26][0][][] */ -61,-26,1,5,-42,16,-23,-28,-127,-56,3,-44,36,116,-76,50, 
  /* [27][0][][] */ 2,19,1,82,33,-51,-14,-26,80,25,-44,-9,9,127,14,30, 
  /* [28][0][][] */ -17,78,59,39,127,28,44,44,-53,-13,-17,-33,22,56,50,-16, 
  /* [29][0][][] */ 24,-24,-10,1,6,2,10,0,-30,-35,-4,-127,31,-15,-5,-9, 
  /* [30][0][][] */ 1,63,-61,96,-45,-36,38,-127,-57,35,-52,-20,92,57,67,111, 
  /* [31][0][][] */ -55,15,14,-86,20,27,-8,-49,-7,127,-12,-79,-34,-92,-30,-22, 
  /* [32][0][][] */ -127,-62,19,61,63,35,8,27,5,-35,-68,27,38,-2,58,53, 
  /* [33][0][][] */ -22,-62,-46,13,-86,-41,-54,7,77,47,-2,-58,-8,-71,127,31, 
  /* [34][0][][] */ 51,3,74,4,28,11,-56,92,-61,-41,85,27,7,-20,-6,127, 
  /* [35][0][][] */ -39,84,-52,5,-13,-36,23,-98,76,127,-105,27,12,-36,71,-127, 
  /* [36][0][][] */ -88,51,45,47,56,64,127,57,22,47,47,49,-25,-8,-16,-54, 
  /* [37][0][][] */ 3,-29,10,-30,27,-48,-77,-87,-127,-56,-68,-84,-32,-120,102,-83, 
  /* [38][0][][] */ 17,70,-20,-48,127,15,54,-18,90,84,-17,9,-30,-65,20,0, 
  /* [39][0][][] */ -11,38,10,-127,7,34,-42,47,34,-84,-13,-16,20,72,14,48, 
  /* [40][0][][] */ -7,6,30,-95,20,14,-20,-11,-80,-33,21,7,23,-127,27,-21, 
  /* [41][0][][] */ -5,-19,-27,6,23,-27,26,4,3,45,-56,-24,-127,25,12,26, 
  /* [42][0][][] */ 127,51,19,-36,-89,-66,-56,-62,-16,27,46,-19,-29,27,97,-72, 
  /* [43][0][][] */ 3,56,-95,75,92,48,127,-47,-2,-26,-73,-19,48,-88,-122,-57, 
  /* [44][0][][] */ -59,29,18,-57,65,52,-89,-127,-49,-12,35,-4,-2,-85,43,-112, 
  /* [45][0][][] */ 28,8,-127,-15,-1,-90,-11,-108,-15,32,-38,-92,43,5,11,13, 
  /* [46][0][][] */ 7,-5,-17,-91,-19,22,15,-18,-111,-23,18,23,1,-127,42,-26, 
  /* [47][0][][] */ -5,61,23,-35,120,5,-21,14,-46,30,24,45,-10,-10,127,-29, 
  /* [48][0][][] */ -127,-72,-19,39,68,27,34,17,11,4,-58,32,21,33,57,33, 
  /* [49][0][][] */ 45,-28,26,127,66,-6,58,16,-127,-110,-18,-94,40,125,28,-126, 
  /* [50][0][][] */ 11,-40,-79,17,31,-127,-7,-3,8,-1,-18,-24,48,8,-11,21, 
  /* [51][0][][] */ 13,79,24,-3,8,-15,-13,5,-125,65,-16,-90,27,-127,-12,99, 
  /* [52][0][][] */ -11,28,23,40,53,32,25,56,68,54,12,-21,-19,127,10,35, 
  /* [53][0][][] */ 9,-31,6,-24,-103,-32,-109,-14,40,43,-20,-50,66,-127,119,40, 
  /* [54][0][][] */ 80,-49,-43,-4,127,54,-84,-13,-89,-61,-20,-82,38,-3,-37,11, 
  /* [55][0][][] */ 57,20,18,-2,66,-15,-81,-127,-69,-127,-77,-12,25,-50,-18,-16, 
  /* [56][0][][] */ -24,29,22,-25,-14,-14,-104,52,-3,127,-12,-8,47,-8,8,14, 
  /* [57][0][][] */ 17,10,-68,1,-53,-76,127,119,-26,45,-42,-40,16,35,112,-1, 
  /* [58][0][][] */ 14,36,-127,6,57,81,-20,32,-86,-50,47,58,-72,-3,22,-13, 
  /* [59][0][][] */ -72,60,97,11,-52,-30,83,127,28,-22,41,-11,-2,31,54,18, 
  /* [60][0][][] */ 0,16,-29,-24,5,-127,-39,-14,-20,-26,8,2,42,-35,21,33, 
  /* [61][0][][] */ 41,-12,8,127,73,8,24,-13,-120,-7,-10,41,12,32,15,-59, 
  /* [62][0][][] */ -28,105,10,-54,-51,-41,-70,38,-14,-54,-127,-48,9,-106,-52,4, 
  /* [63][0][][] */ -50,25,-9,127,-57,29,-51,-11,-46,-14,-21,-50,18,74,20,18, 
  /* [64][0][][] */ 43,31,-6,34,-10,0,2,28,-5,26,-28,-25,4,-127,41,-32, 
  /* [65][0][][] */ -17,-41,25,-127,33,16,45,-34,-32,-5,33,-57,10,10,-15,-11, 
  /* [66][0][][] */ 32,-18,85,-33,-10,48,-31,75,-18,-127,64,62,24,88,13,87, 
  /* [67][0][][] */ 4,40,0,-127,8,14,-75,35,59,-123,-44,-21,58,80,58,41, 
  /* [68][0][][] */ -12,22,127,-17,37,-10,-19,18,-40,-39,-25,-32,3,6,50,-7, 
  /* [69][0][][] */ 127,88,-20,-6,-68,-34,-43,-56,-16,-10,27,-51,-10,24,31,-64, 
  /* [70][0][][] */ 40,27,-76,14,-45,39,50,127,-16,110,-40,-28,6,45,-30,-7, 
  /* [71][0][][] */ -3,12,0,6,-4,-95,-14,23,-29,33,-94,23,-127,-6,61,74, 
  /* [72][0][][] */ 44,6,-127,24,31,42,4,83,-71,-56,11,-37,43,30,-28,0, 
  /* [73][0][][] */ -37,26,37,12,41,-24,-90,-127,8,-98,45,-26,32,-12,30,-17, 
  /* [74][0][][] */ -5,30,41,118,22,20,-84,86,-74,-18,-12,21,1,-98,8,-127, 
  /* [75][0][][] */ 28,6,-84,-2,-8,-42,-15,-62,93,8,-41,-9,51,127,-57,20, 
  /* [76][0][][] */ -8,-42,-20,14,-25,-27,-2,99,45,1,-24,-127,-27,-6,35,38, 
  /* [77][0][][] */ 1,66,-23,127,-24,13,74,40,8,73,-47,21,22,-68,-1,-60, 
  /* [78][0][][] */ -25,-40,39,-74,58,-12,7,65,42,0,63,-37,-31,127,1,11, 
  /* [79][0][][] */ -43,-106,-88,-35,-66,10,43,-60,127,-15,48,44,-13,60,24,-65, 
  /* [80][0][][] */ -39,-24,127,-68,64,19,31,-30,-69,-10,3,-121,-42,101,10,-24, 
  /* [81][0][][] */ -69,63,-114,20,71,-127,-28,62,12,-29,78,14,20,-10,28,-8, 
  /* [82][0][][] */ 127,16,-14,14,2,-127,-42,0,-20,1,-110,1,101,-11,11,38, 
  /* [83][0][][] */ -32,56,-118,-92,-53,7,33,-127,26,28,-13,-88,18,11,5,67, 
  /* [84][0][][] */ -33,46,62,-61,-13,-38,45,-127,-14,57,-11,0,64,28,94,61, 
  /* [85][0][][] */ -56,108,34,-127,-87,-52,-54,-26,-58,-10,-86,13,39,-22,-77,-12, 
  /* [86][0][][] */ -1,1,-23,-6,-8,-17,127,48,13,-36,20,-11,4,32,61,-26, 
  /* [87][0][][] */ -23,-21,-7,-111,9,-18,46,-28,-27,-1,11,-127,-11,-19,-11,-63, 
  /* [88][0][][] */ 104,-38,30,32,6,-119,-20,35,-63,37,-127,-68,25,47,14,16, 
  /* [89][0][][] */ 63,-48,-68,-22,8,-44,-20,-3,-63,33,-12,-114,127,20,15,-16, 
  /* [90][0][][] */ 15,-67,58,-78,60,-18,-87,71,42,-117,-66,-15,13,127,22,-105, 
  /* [91][0][][] */ -39,7,9,3,34,12,-6,-86,-4,73,-38,-127,-9,-4,-33,-1, 
  /* [92][0][][] */ -26,36,36,23,-7,-127,0,-3,-7,-11,-12,-7,11,-36,28,-2, 
  /* [93][0][][] */ 21,-28,127,-8,-75,81,57,-35,2,57,-64,3,-31,-24,36,8, 
  /* [94][0][][] */ 31,23,-14,-34,10,-28,-47,-14,-21,4,4,-33,127,-34,44,-16, 
  /* [95][0][][] */ 102,127,3,53,-74,1,-60,53,19,14,102,-55,-89,10,95,-90, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant7_scale = { 96, { 0.00068762258160859346, 0.001216658391058445, 0.00051534420344978571, 0.00077752448851242661, 0.00056720047723501921, 0.00093057425692677498, 0.00043215512414462864, 0.00085254950681701303, 0.00053139630472287536, 0.00097717507742345333, 0.00019499093468766659, 0.00051000941311940551, 0.00051923660794273019, 0.0029018742498010397, 0.00068114220630377531, 0.00043887426727451384, 0.00031094995210878551, 0.0005742420325987041, 0.0011290813563391566, 0.0008862960385158658, 0.00035770112299360335, 0.0002018668019445613, 0.00047245726455003023, 0.00021527342323679477, 0.00031551302527077496, 0.001252724090591073, 0.0014416563790291548, 0.00073312065796926618, 0.00056227500317618251, 0.0010694968514144421, 0.00038232951192185283, 0.00066913396585732698, 0.00050145294517278671, 0.00055830506607890129, 0.00074222375405952334, 0.00059080345090478659, 0.00042344524990767241, 0.00035573216155171394, 0.00069798954064026475, 0.00097967870533466339, 0.00043759742402471602, 0.0014346576062962413, 0.00069267168873921037, 0.00054740137420594692, 0.00094486406305804849, 0.00038187767495401204, 0.00076024711597710848, 0.00060336361639201641, 0.0007092143059708178, 0.00042714423034340143, 0.00065469963010400534, 0.00051541224820539355, 0.0014402020024135709, 0.00047124255797825754, 0.00083573866868391633, 0.00068909116089344025, 0.0011385479010641575, 0.00085742800729349256, 0.0007521791267208755, 0.00045275274896994233, 0.0016950122080743313, 0.00082890718476846814, 0.00052258971845731139, 0.00068208848824724555, 0.0012525130296126008, 0.00080044730566442013, 0.00024968452635221183, 0.00057934550568461418, 0.0012691001174971461, 0.00082559924339875579, 0.00087050988804548979, 0.00058142893249168992, 0.0013326421612873673, 0.0011405767872929573, 0.00065136578632518649, 0.0004044931847602129, 0.00068305234890431166, 0.00028802710585296154, 0.00028042064514011145, 0.00051166251068934798, 0.00061894487589597702, 0.0004102048696950078, 0.000343304593116045, 0.0005470788455568254, 0.00046960383770056069, 0.00068970047868788242, 0.0014583396259695292, 0.00056714587844908237, 0.00025235960492864251, 0.00063126708846539259, 0.00074716884410008788, 0.00065622199326753616, 0.00074172933818772435, 0.0013083787634968758, 0.00066815008176490664, 0.00035606723395176232, } };
const TfArray<96, int> quant7_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data8[16] = { 894, 28482, -19694, -10233, -11781, 1225, 17968, -54353, -6642, 18881, 18735, 2191, 338, 2757, 817, 1575, };
const TfArray<1, int> tensor_dimension8 = { 1, { 16 } };
const TfArray<16, float> quant8_scale = { 16, { 0.00056590401800349355, 0.00034599076025187969, 0.00018119026208296418, 0.00017648978973738849, 0.00025127280969172716, 0.00035423049121163785, 0.0002936586388386786, 0.00030507962219417095, 0.00022604719561059028, 0.00028114067390561104, 0.00055216264445334673, 0.00073408032767474651, 0.00030705562676303089, 0.0002173586399294436, 0.0003965107025578618, 0.00030956606497056782, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data9[16*1*1*96] = { 
  /* [0][0][][] */ -31,-25,-18,-20,2,-19,-47,-16,40,-7,-30,-27,-33,-31,-12,11,-11,7,4,-21,26,-5,25,-2,19,-26,-34,127,28,-49,51,5,-18,23,-13,-20,-36,-1,-27,-3,-22,19,-15,20,-14,2,8,30,7,15,-24,-12,36,4,-24,57,29,30,-28,-49,-27,19,-1,-52,-36,-89,-2,27,5,27,20,-31,-22,-50,-16,-9,-37,51,30,-3,-30,-44,22,12,-35,6,-4,-122,-26,-47,-12,24,39,-65,-54,16, 
  /* [1][0][][] */ 28,-76,-94,-74,95,25,56,30,10,-93,-75,-50,6,-53,-35,15,-81,28,69,39,38,34,14,-44,6,-29,-60,-88,7,-35,-56,63,-39,57,-24,-19,-17,-28,20,19,-24,44,-49,-32,-66,41,15,26,-7,-34,-1,-56,-50,3,21,31,-8,-26,-51,-65,22,-15,-1,-13,-53,75,8,-2,-45,-26,-53,40,27,-115,-55,-18,14,-60,56,-7,-24,-45,30,3,-66,71,-19,-2,4,-80,-22,5,7,-27,-10,127, 
  /* [2][0][][] */ 2,30,-39,-7,99,127,30,63,-17,-54,21,36,18,20,-18,-5,31,22,-29,43,37,-48,75,42,20,69,24,-27,8,12,23,-29,52,39,-15,41,-98,-86,37,32,-19,-59,44,31,28,-2,34,49,-53,-7,9,27,52,-35,31,82,-6,-37,1,9,48,52,49,12,-8,3,-43,49,-33,13,-5,-3,-58,-44,33,78,83,31,-22,22,53,-6,37,23,-31,-6,16,72,-2,62,24,-50,-14,5,-83,12, 
  /* [3][0][][] */ 83,-3,78,-42,68,-127,-18,-11,-34,-57,9,-61,-27,24,8,114,3,-35,73,17,96,18,61,-1,83,-39,-20,46,75,20,-56,98,-98,-26,23,-5,-19,-49,-19,25,-92,-18,74,-10,-1,95,-93,-89,-30,-73,-85,41,39,-72,-14,13,-112,104,100,47,32,71,-26,-57,54,43,-17,-108,41,-5,21,-113,55,-45,31,-47,-3,22,73,46,-7,-80,42,-27,8,-22,13,43,-2,-25,38,99,51,71,61,-74, 
  /* [4][0][][] */ -20,-10,10,-37,106,36,-5,2,-52,-28,-19,-29,-67,48,-22,96,0,-81,-83,96,4,30,11,-1,-11,-21,4,-14,1,2,70,-6,127,-11,-1,19,41,3,11,-42,-37,-10,-16,-59,32,-11,27,6,34,1,14,-3,-53,-27,9,-17,56,-23,-45,62,25,47,60,50,19,53,-43,-14,-70,7,28,66,-12,-82,-70,-2,5,0,81,-25,-11,-48,-6,-29,-72,0,70,54,-44,57,45,-74,-22,36,49,-26, 
  /* [5][0][][] */ 11,-1,10,32,25,-34,46,-17,-39,-20,8,24,17,41,-16,47,-4,-8,-13,16,8,-17,-63,48,26,15,50,-48,-2,27,16,17,19,-1,29,-19,52,49,-22,-14,0,-3,37,6,5,22,-19,-45,4,-29,-2,6,-3,-32,15,3,-47,-3,3,21,60,8,-17,16,-19,52,10,72,9,52,-9,38,14,27,-8,37,-37,-22,-17,16,17,3,-13,16,-13,13,-33,127,37,62,23,-13,17,41,-23,-13, 
  /* [6][0][][] */ 24,-74,45,-16,-12,-25,44,32,-20,8,18,-62,-36,27,-50,49,27,4,-21,8,-59,8,-16,-10,-2,7,39,7,-9,27,53,-25,82,-31,76,13,-14,22,-6,-98,-18,111,31,-39,45,-32,-55,-6,18,4,-42,83,5,-28,4,-22,-50,-65,9,4,10,84,5,-105,38,-17,-18,-32,43,14,127,-16,-23,11,-17,10,-87,0,-3,32,68,61,-11,-6,23,-18,25,46,33,46,71,-31,17,21,11,-58, 
  /* [7][0][][] */ -8,112,61,21,127,10,43,-27,-15,-57,-4,16,-17,33,28,13,27,-3,12,17,44,-43,17,1,-28,16,54,27,-3,-5,38,-6,40,-25,-21,26,9,43,-21,79,-35,33,13,30,13,-44,34,3,-7,-26,33,23,30,-21,-49,32,-3,31,-33,15,-2,-7,-34,-12,-38,68,-39,-64,-2,-7,41,55,6,-19,22,-12,40,79,14,-33,-20,0,2,0,31,29,3,15,-14,59,-20,-51,-26,7,43,-46, 
  /* [8][0][][] */ -9,-20,75,26,-82,-31,22,18,-3,54,65,39,-20,50,21,-22,-54,26,-36,11,-47,-31,-127,56,-4,1,102,-3,8,25,26,8,84,-22,22,12,-2,-4,30,41,4,-26,13,43,-3,4,-1,-19,-67,-21,31,71,-12,-2,0,34,-27,-47,-92,6,30,4,-37,-26,2,90,-11,-39,52,20,12,-28,37,57,72,-27,7,-30,-46,6,-49,36,-33,14,47,-19,77,64,50,6,45,10,25,26,58,-19, 
  /* [9][0][][] */ 10,-114,-25,41,76,80,-12,10,33,-58,30,89,-34,12,89,-127,-7,16,-23,-6,-14,-45,26,-10,-40,-10,-4,6,-29,24,2,6,-4,13,-70,-2,-10,-23,14,104,9,-32,-14,91,23,-10,-31,0,12,-9,11,-39,55,28,-36,-46,-25,68,-52,9,28,-2,-41,96,-71,-5,10,-1,19,56,0,-52,14,-6,11,54,41,-58,-4,5,-10,-17,19,30,52,-91,43,-30,-10,-21,-58,-3,-47,-32,-16,-34, 
  /* [10][0][][] */ -59,-41,-4,-15,-29,3,59,-2,15,27,42,66,24,-8,-3,0,0,44,-54,-14,-3,9,3,24,-22,-1,41,-100,22,-44,60,-23,9,14,15,24,17,64,-9,-34,34,-21,39,-46,27,-9,14,-14,12,25,-8,14,-49,-22,0,-6,1,8,-7,-40,27,3,-27,15,-46,82,-7,-10,-2,-46,5,-5,-11,10,4,31,-25,29,-48,23,-2,15,2,18,34,-27,5,127,16,21,31,-24,7,-2,54,-46, 
  /* [11][0][][] */ -52,9,9,-26,28,-42,-3,14,-56,9,19,43,23,33,-30,3,41,1,-50,-16,-1,-32,-11,-3,33,22,87,-2,4,28,-38,7,4,-5,-8,5,9,0,11,35,-8,-29,6,-2,73,27,31,-1,50,9,6,47,4,-59,18,24,-86,-25,-7,-27,9,1,-9,27,-21,-6,1,12,3,12,24,30,-6,21,31,-14,-5,62,-92,53,-16,8,-40,-44,127,-1,32,3,21,50,-11,-37,-30,52,-3,-20, 
  /* [12][0][][] */ -1,22,-34,2,28,16,-1,-19,21,-4,-19,-26,9,-38,50,10,-34,-19,46,-35,-45,-13,-31,44,-7,36,-58,74,-29,21,-13,-10,-37,36,-18,15,-2,-11,11,2,9,-36,-25,2,-46,0,8,54,-29,22,-17,-33,-14,-7,-8,-54,29,13,39,-1,-31,-39,27,41,73,-90,19,39,-20,-127,-43,40,23,2,-8,92,20,9,27,-9,-39,5,-27,-1,-43,17,-21,-70,-46,-35,-7,25,-18,-1,-5,48, 
  /* [13][0][][] */ -77,80,4,19,-39,-47,-20,-14,-38,-8,40,13,55,31,-28,35,-4,0,-28,6,-3,5,19,-58,26,32,7,30,21,-17,-33,-114,-60,-20,17,7,0,21,6,-8,-35,57,-21,8,54,22,-25,19,71,-21,-1,59,92,-26,73,-55,-23,62,63,39,9,3,-9,-13,7,-11,0,-26,54,23,28,-127,9,-14,-45,30,61,51,-4,-23,57,1,-10,-7,3,-29,88,-6,-25,-10,15,36,47,-15,-29,-20, 
  /* [14][0][][] */ -29,22,-13,-88,46,35,-49,29,-123,-28,-11,19,-27,-51,-117,-31,-90,2,88,26,77,-30,34,-127,-8,7,-23,-63,15,-36,-13,-59,-83,-63,17,-4,-43,-18,-25,-29,-23,57,-68,-15,-68,28,6,9,124,-38,21,-5,19,36,-120,20,-32,23,-106,-16,2,61,76,59,44,35,-30,-21,-86,6,66,57,66,-12,-21,48,99,-74,-19,-97,14,-23,-15,43,55,-64,-52,-6,-59,10,-3,54,36,26,24,-17, 
  /* [15][0][][] */ -33,-81,16,-47,31,-12,-10,-52,-51,37,16,-4,49,12,33,-44,-72,-6,-4,23,-39,-22,-89,-67,-33,24,26,12,2,0,68,-127,10,46,32,17,12,32,-119,32,3,-87,9,61,-2,-46,17,17,76,-16,-24,-122,44,81,24,30,12,-27,-1,57,22,4,50,-31,-4,12,-27,7,4,29,44,36,-47,22,26,-19,2,18,-8,23,16,67,-8,99,11,-86,-31,-15,-28,81,49,103,-14,16,23,-54, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant9_scale = { 16, { 0.024050919339060783, 0.014704606495797634, 0.0077005862258374691, 0.007500816136598587, 0.0106790941208601, 0.015054795891046524, 0.012480491772294044, 0.012965883128345013, 0.0096070058643817902, 0.011948478408157825, 0.023466913029551506, 0.031198414042592049, 0.013049863278865814, 0.0092377420514822006, 0.016851704567670822, 0.013156557455658913, } };
const TfArray<16, int> quant9_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data10[96] = { 18888, 64524, -522, 2452, 24351, -5221, -800, -1683, 6459, 19295, -3645, -842, 715, 5892, 6861, -9244, -4169, -568, 647, 18575, -11891, 10647, -1196, 6461, 30796, -352, -3719, 24160, 13194, -18425, 4505, 21167, 22945, -12333, 3060, -413, -1300, 587, 2640, -10399, -5364, -833, -19437, 2108, 31318, -1935, 11630, 314, -18565, 2126, -96, 775, -3010, 21930, -4685, 20698, 18688, -518, 34704, -989, -10111, -2039, 3414, -545, -690, 8044, -764, -7685, -3362, 3573, 293, -1140, 1088, 641, -3056, -5356, 326, -345, 43855, -7841, -8409, -10945, -1145, 883, 47008, -13968, -9900, -26900, -5919, 7701, -2799, 26252, -526, -4056, -4966, 736, };
const TfArray<1, int> tensor_dimension10 = { 1, { 96 } };
const TfArray<96, float> quant10_scale = { 96, { 0.00011764049850171432, 8.7146239820867777e-05, 8.5985426267143339e-05, 0.000166468889801763, 0.00012487353524193168, 0.00014510966138914227, 6.7385226429905742e-05, 7.040006312308833e-05, 0.0002554394886828959, 0.00012109729868825525, 0.00032203370938077569, 0.00011285851360298693, 0.0002446361759211868, 0.00017951084009837359, 0.00027197768213227391, 0.00015608295507263392, 0.00019959945348091424, 0.00013567412679549307, 0.00021717068739235401, 5.0154641940025613e-05, 6.8296532845124602e-05, 5.6256118114106357e-05, 0.00012463619350455701, 0.00011040001845685765, 9.1412788606248796e-05, 7.6783886470366269e-05, 0.0001342563919024542, 0.00011230711970711127, 7.4199982918798923e-05, 0.0004304723406676203, 0.00027526234043762088, 0.00028469183598645031, 0.00013000010221730918, 0.00013187518925406039, 0.00017548413597978652, 0.00040633583557792008, 0.00033595002605579793, 0.00019063263607677072, 0.0001532109163235873, 6.1908984207548201e-05, 0.00015968160005286336, 0.00018757393991108984, 0.00023912623873911798, 7.9610625107306987e-05, 0.00036263905349187553, 8.7909356807358563e-05, 8.0790756328497082e-05, 0.00027182174380868673, 0.00045155856059864163, 0.00011356028699083254, 0.00044074348988942802, 0.00012204578524688259, 0.00017048562585841864, 0.00012019388668704778, 0.00017908313020598143, 0.00010508827108424157, 0.00013770729128737003, 0.00033429483301006258, 5.5694421462249011e-05, 0.00017983467841986567, 0.00023433157184626907, 0.00021806011500302702, 0.00011404992983443663, 0.00013858429156243801, 0.00011674272536765784, 0.00015424781304318458, 0.00022232101764529943, 0.00029594736406579614, 0.00021032711083535105, 0.00012651570432353765, 0.00013425754150375724, 9.2699730885215104e-05, 0.00024826620938256383, 0.00013125661644153297, 0.00024344919074792415, 0.00036257132887840271, 0.00012171599519206211, 7.5808660767506808e-05, 5.887397492188029e-05, 0.00016839556337799877, 0.00015200486814137548, 0.00019223190611228347, 0.00013422618212644011, 0.00020166116883046925, 7.8415840107481927e-05, 0.00010336042760172859, 6.715054769301787e-05, 0.00040037996950559318, 0.00033882312709465623, 9.7891090263146907e-05, 0.00035019963979721069, 4.5684773795073852e-05, 9.9297612905502319e-05, 0.00012937196879647672, 0.00026499986415728927, 0.00032621450372971594, } };
const TfArray<96, int> quant10_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data11[1*3*3*96] = { 
  /* [0][0][][] */ -46,-72,-14,127,23,73,72,-54,-12,-15,-11,-3,-32,-6,36,2,-13,-40,30,24,24,-127,127,6,-92,12,51,-26,-118,-127,35,26,4,23,58,-24,-32,-5,29,-7,-17,28,-104,70,23,-63,35,46,-19,45,-21,19,3,-5,13,43,-97,-45,-70,-22,-10,2,10,38,71,-23,74,13,-6,16,19,127,26,22,22,-4,-9,13,127,-6,-12,12,-26,22,117,28,-87,-21,3,-34,-15,-45,5,-25,-15,30, 127,-127,74,106,-42,127,35,-111,65,7,-16,127,127,-105,-15,20,10,127,127,-105,127,-75,81,69,-127,-119,-67,-32,-49,43,-61,-19,-89,49,-127,-91,-44,-11,-50,79,-4,127,127,75,-54,-106,-116,-52,-16,-127,43,81,69,-28,39,74,-44,44,-76,-113,-46,-35,-64,68,73,-56,31,29,-73,38,-17,87,120,127,9,24,2,54,-31,53,65,127,127,-23,-10,83,-122,127,-114,-97,4,-127,-90,-127,-36,111, -73,-14,27,-87,15,-22,59,-4,75,-32,-27,24,-19,-11,-10,-7,-12,-13,9,-3,-20,-102,31,0,-119,94,4,-53,113,47,-18,13,-5,18,11,-31,-10,36,19,24,21,12,-118,66,15,-15,34,11,-16,7,-21,2,-19,3,-3,21,-61,11,-45,49,1,43,27,3,-8,-38,-34,27,11,0,-5,37,12,-30,-3,1,-9,-11,-83,1,-20,-25,-16,4,-111,8,-40,-26,-45,29,-27,-37,30,-27,-15,2, 
  /* [0][1][][] */ -60,-75,72,-42,-49,97,18,127,-48,-20,2,-108,25,-124,77,37,-5,-56,-14,89,61,-56,49,44,-81,-22,127,-20,-21,60,117,-102,-127,89,-86,-60,-34,31,-29,109,-54,-23,-3,41,-50,127,-25,66,14,89,18,-5,17,-50,24,26,127,122,-87,-87,127,-27,-34,127,73,-34,-19,-1,127,39,127,97,-38,102,0,8,16,12,-27,5,-40,117,-79,109,-2,41,-66,28,76,-127,-29,-6,127,-65,-22,5, 68,120,60,-121,127,81,83,39,-127,127,127,-30,-63,-127,-127,127,127,-61,-126,-43,122,92,-120,127,-106,-103,-49,127,-127,105,-127,-127,-74,127,102,127,127,-127,-98,127,-68,-92,107,-127,-127,-28,-127,-127,127,-107,82,41,127,127,127,-127,106,-127,-127,127,15,-71,-127,-98,-127,127,-127,127,-118,-127,-99,-86,-127,-82,127,127,-127,127,-76,127,127,33,-42,-127,57,127,98,49,127,20,127,8,-72,37,127,-127, -50,-13,-52,38,-57,-100,36,-23,22,-31,-29,98,1,104,12,14,-6,70,-4,127,7,-63,-39,7,-62,115,-77,-19,-72,-17,13,-63,-59,44,4,-18,-24,43,-65,44,127,-1,-40,20,-42,-54,15,41,6,110,-14,3,-36,-69,5,15,100,7,-5,22,-33,127,90,-50,-43,14,36,-12,-70,124,-18,-85,2,-57,-11,-17,29,14,73,-40,-67,-44,59,18,-48,-18,75,21,18,74,-43,16,-47,100,-25,-3, 
  /* [0][2][][] */ -67,-3,-7,-25,14,-38,58,26,57,-28,-38,-7,16,16,-28,8,-10,66,11,4,-65,-60,2,-10,-18,-52,45,-65,88,35,21,27,11,-7,-10,-45,-5,38,-2,11,-20,-4,-65,99,1,34,9,38,-16,-35,9,-22,20,0,12,8,-76,27,-23,15,16,4,-27,-4,-3,-45,-50,14,-25,9,27,29,16,-22,23,0,19,1,-74,-10,-6,-11,18,15,-127,14,8,-48,-62,-47,-29,-47,11,58,-17,-5, 119,28,-127,-39,-72,-23,37,32,-60,-29,-20,-104,-77,122,-14,47,-1,-52,-11,-118,105,-45,-36,-1,-96,127,-47,22,-41,-23,-12,-8,-49,15,25,7,-23,-24,127,68,10,-13,69,-45,-42,75,-70,-43,-32,-9,-127,-127,-50,-26,-5,33,-64,-6,13,37,-6,-13,7,-46,-56,36,62,-21,113,114,-21,-72,13,-61,2,-1,101,2,53,25,14,-94,-50,3,1,3,127,41,-64,52,-23,-109,44,81,-9,28, -54,10,-20,25,16,-67,-127,5,-8,-8,-18,3,13,-26,17,3,-10,-13,8,20,-48,-54,16,-5,10,-103,20,5,-42,-40,-10,12,42,-23,-9,-24,-31,5,40,-44,21,1,-49,-40,0,66,21,14,-9,-8,7,-12,18,6,-1,-8,-61,-9,-8,-35,-11,15,77,-9,34,-1,-5,34,7,11,-4,18,-15,11,3,11,38,1,76,-12,5,-12,-5,-18,70,1,39,-41,53,46,-19,-66,-7,5,-13,-13, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant11_scale = { 96, { 0.0049997209571301937, 0.0037037150468677282, 0.0036543805617839098, 0.0070749279111623764, 0.0053071253933012486, 0.0061671603471040726, 0.0028638720978051424, 0.0029920025262981653, 0.010856178589165211, 0.0051466352306306362, 0.013686432503163815, 0.0047964868135750294, 0.010397037491202354, 0.0076292105950415134, 0.011559051461517811, 0.0066335257142782211, 0.0084829768165946007, 0.0057661505416035652, 0.0092297540977597237, 0.002131572226062417, 0.002902602544054389, 0.0023908850271254778, 0.0052970382384955883, 0.0046920008026063442, 0.0038850435521453619, 0.0032633151859045029, 0.0057058962993323803, 0.0047730524092912674, 0.0031534992158412933, 0.018295073881745338, 0.011698649264872074, 0.012099402956664562, 0.005525004118680954, 0.0056046955287456512, 0.0074580754153430462, 0.017269272357225418, 0.014277876354753971, 0.0081018870696425438, 0.0065114637836813927, 0.0026311317924410105, 0.0067864679731428623, 0.0079718921333551407, 0.010162864811718464, 0.0033834513742476702, 0.015412159264087677, 0.0037361476570367813, 0.0034336070530116558, 0.011552424170076847, 0.019191239029169083, 0.0048263119533658028, 0.018731597810983658, 0.005186945665627718, 0.0072456388734281063, 0.0051082400605082512, 0.0076110330410301685, 0.0044662514701485634, 0.0058525600470602512, 0.014207529835402966, 0.0023670129012316465, 0.007642973680049181, 0.0099590914323925972, 0.0092675546184182167, 0.0048471218906342983, 0.0058898325078189373, 0.0049615656025707722, 0.0065555316396057606, 0.0094486428424715996, 0.012577762827277184, 0.0089389020577073097, 0.0053769173100590706, 0.0057059456594288349, 0.0039397384971380234, 0.010551313869655132, 0.0055784061551094055, 0.010346590541303158, 0.015409281477332115, 0.0051729297265410423, 0.0032218680717051029, 0.0025021438486874104, 0.0071568111889064312, 0.0064602070488035679, 0.008169855922460556, 0.0057046129368245602, 0.0085705993697047234, 0.0033326731063425541, 0.0043928180821239948, 0.0028538980986922979, 0.017016148194670677, 0.014399982988834381, 0.0041603711433708668, 0.014883484691381454, 0.001941602909937501, 0.0042201485484838486, 0.0054983086884021759, 0.011262494139373302, 0.013864115811884403, } };
const TfArray<96, int> quant11_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data12[96] = { 1522, 7329, 14720, 14104, 15414, -4505, -2164, 6833, 22435, -3527, 11770, 7801, 7725, 21362, 31438, 1924, 2383, 4297, 16811, 5253, -122, 352, 9467, -1664, 5777, 393, 12921, 7506, 5876, 62223, 60631, 14265, 11533, -509, 20619, 2613, 1180, 4201, 24773, -850, 15311, 6509, 30466, -2558, 29143, 6572, 7134, 15846, 83103, 11789, -646, 6234, -4120, -257, -3326, 9733, -124, 18628, 9876, 16224, 5611, 19319, 11810, 5088, 7273, 10402, 3268, -3394, 7411, -3352, 4241, 13600, 40650, 4851, -4284, -5580, 8448, 854, 2197, -1311, 20372, 17852, 3975, 21796, 3432, 636, 13328, 69938, 10653, 17109, 8018, -221, 4746, 7187, 4321, 14781, };
const TfArray<1, int> tensor_dimension12 = { 1, { 96 } };
const TfArray<96, float> quant12_scale = { 96, { 0.00024069131177384406, 0.00019126749248243868, 0.00013226171722635627, 0.00016432389384135604, 0.00018860245472751558, 0.00023992732167243958, 0.00038326423964463174, 0.00022617870126850903, 0.00010045889212051407, 0.00041874730959534645, 0.0002279442414874211, 0.00011469424498500302, 0.00017074187053367496, 0.00011183576134499162, 7.7529890404548496e-05, 0.00026175854145549238, 0.00019312251242808998, 0.00028063255012966692, 0.00013293194933794439, 0.00020674672850873321, 0.00024745042901486158, 0.00044417532626539469, 0.00020096723164897412, 0.00042977163684554398, 0.00046079722233116627, 0.00021765478595625609, 0.00016375955601688474, 0.00017367933469358832, 0.00028224571724422276, 5.7472894695820287e-05, 4.6543940698029473e-05, 0.00017078353266697377, 0.00014970175107009709, 0.00033529082429595292, 9.9053642770741135e-05, 0.00021231101709417999, 0.00035386902163736522, 0.00034560725907795131, 0.00011356124741723761, 0.00063575245440006256, 0.00012756932119373232, 0.00023225207405630499, 8.7818872998468578e-05, 0.00037779920967295766, 0.00011366198305040598, 0.00022668307065032423, 0.0002364550600759685, 0.00016557751223444939, 5.0178739911643788e-05, 0.00017671992827672511, 0.00014701912004966289, 0.0002762264630291611, 0.00027415447402745485, 0.0001677950203884393, 0.00033430950134061277, 0.00012261446681804955, 0.00018593075219541788, 9.6052528533618897e-05, 0.00021276311599649489, 9.7905955044552684e-05, 0.00028747192118316889, 7.8651290095876902e-05, 0.00012796094233635813, 0.00018131065007764846, 0.00034500329638831317, 0.00019523160881362855, 0.00037157340557314456, 0.0003765118308365345, 0.0002195176639361307, 0.00022166782582644373, 0.00025476104929111898, 0.00011176384577993304, 5.2836221584584564e-05, 0.00020816856704186648, 0.00035781835322268307, 0.00023456830240320414, 0.0002020967222051695, 0.00023528964084107429, 0.00036107422783970833, 0.00028694301727227867, 9.8330776381772012e-05, 9.5716073701623827e-05, 0.00020734447753056884, 9.0347850346006453e-05, 0.00034027110086753964, 0.00018821728008333594, 0.00018127571092918515, 5.4295116569846869e-05, 0.00012759845412801951, 0.00013183940609451383, 0.00015892722876742482, 0.00033085374161601067, 0.00030803197296336293, 0.00020780535123776644, 0.00025189053849317133, 0.00010927575203822926, } };
const TfArray<96, int> quant12_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data13[96*1*1*16] = { 
  /* [0][0][][] */ 64,40,-67,99,78,45,93,19,37,38,-121,80,7,-98,29,-127, 
  /* [1][0][][] */ 31,42,20,-2,38,-25,127,-103,16,101,-37,-51,-18,-57,10,23, 
  /* [2][0][][] */ -101,15,43,5,-41,-28,45,127,-29,27,95,-45,-70,2,-3,-65, 
  /* [3][0][][] */ -116,33,21,39,-84,-14,35,127,13,43,-62,49,99,-77,-34,-66, 
  /* [4][0][][] */ -42,12,50,100,26,111,-18,16,42,-27,-13,17,-13,24,-127,0, 
  /* [5][0][][] */ 2,-3,15,-30,-22,-18,-17,-37,-87,127,-75,-122,-17,-4,-75,-16, 
  /* [6][0][][] */ 8,-16,49,-34,54,76,-50,-69,-15,16,100,-34,127,-65,-30,-64, 
  /* [7][0][][] */ 42,46,107,-34,-59,-15,-22,-43,-127,37,-103,-3,-43,-84,87,2, 
  /* [8][0][][] */ -40,37,3,83,-82,29,34,44,-9,-28,66,-127,-49,29,-85,-102, 
  /* [9][0][][] */ -15,-64,20,47,-17,30,17,19,127,35,74,10,21,31,-52,-47, 
  /* [10][0][][] */ 10,-40,-18,-25,-127,-25,-100,-11,18,72,28,-43,32,20,98,-59, 
  /* [11][0][][] */ 90,-47,-54,1,-37,-35,-66,-127,-67,17,-109,-88,46,-36,46,-42, 
  /* [12][0][][] */ -11,-9,-7,-50,-47,-50,-100,1,-22,-13,-16,37,22,88,127,86, 
  /* [13][0][][] */ -1,-108,-127,69,-60,-52,-2,14,72,29,-44,-9,-19,22,91,99, 
  /* [14][0][][] */ -17,-11,3,12,-12,30,-4,127,17,3,49,-26,36,65,4,77, 
  /* [15][0][][] */ 33,-44,-3,85,34,11,96,-5,-6,-127,-14,-19,34,-29,-13,-71, 
  /* [16][0][][] */ 50,-44,-14,1,28,14,4,-88,127,39,104,-31,13,73,97,68, 
  /* [17][0][][] */ -25,-34,41,69,127,27,-30,-47,95,-44,-1,6,39,7,-39,50, 
  /* [18][0][][] */ -39,27,-14,72,-127,25,-47,23,-78,-99,11,-70,-18,-42,26,-8, 
  /* [19][0][][] */ 48,-40,3,-99,41,-56,-89,56,22,-48,82,76,-68,2,47,127, 
  /* [20][0][][] */ 79,-34,116,-46,22,0,-55,38,-23,-41,114,-51,-2,30,-85,127, 
  /* [21][0][][] */ -26,17,-16,-18,-5,-16,-43,-65,-43,86,-14,-3,-127,-52,-2,-22, 
  /* [22][0][][] */ 18,-8,17,11,1,-53,-6,-31,-127,-27,3,-56,12,3,49,-25, 
  /* [23][0][][] */ 25,-5,38,-10,12,40,4,14,-21,-13,63,-39,127,8,-5,-69, 
  /* [24][0][][] */ 17,-29,-19,-100,-6,-2,8,-17,-86,-34,-36,-127,33,-83,84,-4, 
  /* [25][0][][] */ -127,-40,-105,13,-44,-63,-94,-44,-103,-16,-58,-37,-3,-88,87,10, 
  /* [26][0][][] */ -34,-21,-1,-94,127,67,98,1,92,7,120,17,48,67,27,49, 
  /* [27][0][][] */ 118,-7,46,-63,11,-44,9,-23,-35,13,-127,53,29,-38,7,50, 
  /* [28][0][][] */ -108,9,-127,-34,-12,8,78,-58,30,96,-7,-21,-3,-41,-2,9, 
  /* [29][0][][] */ -45,-63,-26,127,-48,44,-36,-29,20,-24,-67,5,-4,-62,10,-79, 
  /* [30][0][][] */ 20,-16,89,-45,77,58,-12,55,19,-87,80,6,10,-7,-42,127, 
  /* [31][0][][] */ -25,-68,20,-66,-11,-28,22,-2,18,36,127,3,-37,65,72,68, 
  /* [32][0][][] */ -1,73,-5,91,-127,52,-107,-15,-83,-58,0,99,-30,78,8,82, 
  /* [33][0][][] */ 41,2,7,127,-12,6,6,-77,-50,40,60,-38,-9,-10,18,52, 
  /* [34][0][][] */ 98,-13,-46,-95,88,-83,-124,-83,-65,127,-71,55,-47,-27,-24,-9, 
  /* [35][0][][] */ 127,45,20,20,47,-62,-52,-35,-96,-44,-32,35,29,-29,36,-11, 
  /* [36][0][][] */ 9,-7,-127,-26,43,-7,-7,-10,-19,0,17,-20,8,-9,15,8, 
  /* [37][0][][] */ -11,0,127,15,-2,50,38,12,14,27,-5,16,-23,1,-27,2, 
  /* [38][0][][] */ -127,16,-25,38,20,77,38,7,19,11,75,-4,-13,-9,-1,16, 
  /* [39][0][][] */ -9,-4,9,10,26,-15,-127,37,12,15,-18,-48,9,-12,8,13, 
  /* [40][0][][] */ 57,88,-14,127,51,18,17,-4,-32,-2,-33,12,60,55,-59,-23, 
  /* [41][0][][] */ -3,42,-61,-5,-37,36,127,67,-28,69,-54,27,25,53,53,-44, 
  /* [42][0][][] */ 75,-7,-26,-45,46,-6,-85,10,11,-127,39,60,-35,59,-30,42, 
  /* [43][0][][] */ -30,-7,-23,-5,-18,-15,-80,-84,12,35,19,-1,-127,-11,44,5, 
  /* [44][0][][] */ 9,9,-32,27,0,18,8,-42,127,15,-3,57,19,54,-2,15, 
  /* [45][0][][] */ -85,-127,9,-45,75,38,-38,28,36,-30,-67,-7,57,57,35,64, 
  /* [46][0][][] */ -11,30,-36,60,-42,-27,-22,-74,-127,9,-48,11,18,37,-2,-9, 
  /* [47][0][][] */ 7,-27,-94,127,38,93,-2,-10,-66,29,35,42,-6,-27,51,-44, 
  /* [48][0][][] */ -59,22,62,-127,36,4,19,40,0,-8,71,-9,5,94,46,85, 
  /* [49][0][][] */ -45,54,-8,50,-52,46,-113,-56,12,-89,-120,-48,41,-87,-19,-127, 
  /* [50][0][][] */ 13,114,31,-88,127,-3,-5,43,126,-28,-26,70,29,1,-12,-56, 
  /* [51][0][][] */ 34,-22,22,26,41,6,-55,-127,14,-78,-5,18,9,-14,23,-15, 
  /* [52][0][][] */ 69,16,-20,57,40,-25,-60,82,-45,127,-91,-42,99,63,-44,10, 
  /* [53][0][][] */ -20,127,58,-118,41,31,47,-1,-30,-56,-1,88,25,-40,-85,24, 
  /* [54][0][][] */ -2,-4,3,60,22,-45,27,-22,16,42,-22,-26,-11,127,-24,-2, 
  /* [55][0][][] */ -127,120,96,23,40,-30,-63,-9,-12,54,127,-72,-68,-34,99,-6, 
  /* [56][0][][] */ 17,-1,-8,-76,111,-19,10,2,32,-16,29,124,40,2,127,50, 
  /* [57][0][][] */ -24,-45,-46,127,-63,15,65,103,14,35,22,-84,-5,87,-10,9, 
  /* [58][0][][] */ 17,121,5,-127,-5,15,16,18,79,11,31,66,-30,-79,-6,72, 
  /* [59][0][][] */ 25,91,76,-89,24,53,45,23,2,71,74,-86,-62,-78,-127,-21, 
  /* [60][0][][] */ 17,-35,97,-91,1,127,55,1,26,-7,-33,-34,67,39,9,45, 
  /* [61][0][][] */ -67,47,-78,-85,-54,67,73,88,-3,26,-15,45,43,127,43,0, 
  /* [62][0][][] */ -4,70,-94,-69,-54,-48,-127,-49,5,-30,-26,-25,88,-106,123,68, 
  /* [63][0][][] */ -61,-25,25,-127,27,-38,-122,-115,-52,60,-11,42,62,-6,12,-63, 
  /* [64][0][][] */ -5,1,28,24,43,30,-54,-106,19,-127,14,-4,-1,-36,17,-18, 
  /* [65][0][][] */ -127,4,9,-26,-30,62,19,-47,-67,21,44,-45,-17,26,-24,-68, 
  /* [66][0][][] */ 15,-30,80,-5,-71,-14,-38,35,-8,-18,105,-31,-3,39,-127,24, 
  /* [67][0][][] */ 13,34,-62,5,25,-35,-40,-70,22,-127,-26,-69,-91,9,-39,1, 
  /* [68][0][][] */ -14,-20,-91,42,-37,-96,68,-13,56,58,67,6,-77,127,37,26, 
  /* [69][0][][] */ -73,60,-68,32,28,-98,98,106,59,40,73,36,127,12,-4,13, 
  /* [70][0][][] */ 32,35,-34,-78,-86,12,127,80,-22,32,13,59,2,31,36,32, 
  /* [71][0][][] */ 3,-25,18,-121,74,31,-14,72,-34,-59,5,31,28,-127,69,-7, 
  /* [72][0][][] */ 21,66,-72,78,13,5,-19,-113,16,66,-127,-28,26,103,13,79, 
  /* [73][0][][] */ -55,-127,0,-27,-82,-14,27,9,9,13,10,-34,16,9,59,1, 
  /* [74][0][][] */ -7,26,94,102,-44,-29,-127,65,-22,-26,-9,-50,-22,-46,-44,-14, 
  /* [75][0][][] */ -38,60,-1,-26,5,83,113,127,19,75,35,8,-76,39,30,-3, 
  /* [76][0][][] */ -33,-41,-20,-34,-15,-127,-91,-45,-7,-48,5,-19,83,8,111,21, 
  /* [77][0][][] */ -32,21,-25,-39,-37,-8,-31,-68,127,-26,-52,-7,2,73,60,-71, 
  /* [78][0][][] */ -33,-91,19,64,82,15,-46,54,-14,-81,-127,19,40,6,26,65, 
  /* [79][0][][] */ 12,-20,15,-69,127,-2,37,9,48,-2,21,6,-31,-6,22,-16, 
  /* [80][0][][] */ -19,-49,127,-68,35,27,28,63,-106,-68,-23,-41,0,116,-100,56, 
  /* [81][0][][] */ 74,-10,69,90,-1,93,-23,-4,-15,-34,-34,-127,-56,-21,-115,-31, 
  /* [82][0][][] */ -37,7,-18,-127,-38,-42,3,29,-43,-77,0,-101,-38,-28,-69,69, 
  /* [83][0][][] */ -43,-12,-56,-95,-86,-12,33,81,-1,-38,80,-46,-38,-121,46,127, 
  /* [84][0][][] */ 64,-5,-50,56,-75,34,-68,58,1,26,127,-22,-94,47,59,-79, 
  /* [85][0][][] */ 26,-22,12,-63,63,-17,-84,87,-114,-127,-106,-48,20,91,93,-110, 
  /* [86][0][][] */ -49,-17,51,-27,-20,100,-15,81,-71,-80,5,-54,-41,-127,-27,37, 
  /* [87][0][][] */ 127,-6,-23,-36,-19,-63,42,-14,28,23,-101,9,20,37,27,67, 
  /* [88][0][][] */ 114,118,-81,60,-27,-47,-27,1,35,-26,-3,42,32,23,122,-127, 
  /* [89][0][][] */ 67,75,-127,-2,-29,-2,-36,-85,57,-4,-16,-90,-21,21,-25,-99, 
  /* [90][0][][] */ 13,-58,-21,-84,-127,8,94,-109,19,-117,55,-100,124,5,4,0, 
  /* [91][0][][] */ 9,36,12,-127,-7,-14,14,-53,-64,59,70,59,38,-63,22,75, 
  /* [92][0][][] */ -5,-9,8,11,25,10,-84,-127,63,-63,28,-13,-24,-4,7,-15, 
  /* [93][0][][] */ 54,48,0,-121,10,19,0,33,-22,-108,17,19,-50,127,-52,31, 
  /* [94][0][][] */ -92,46,-127,-5,18,-80,-44,12,-42,-64,7,-1,28,-15,27,-16, 
  /* [95][0][][] */ -2,110,-53,-95,-73,-12,-84,-30,29,-84,-107,-127,28,2,-26,-57, 
};
const TfArray<4, int> tensor_dimension13 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant13_scale = { 96, { 0.00078257260611280799, 0.00062187825096771121, 0.00043002961319871247, 0.00053427508100867271, 0.00061321328394114971, 0.00078008859418332577, 0.0012461276492103934, 0.00073538697324693203, 0.00032662739977240562, 0.0013614955823868513, 0.00074112735455855727, 0.00037291157059371471, 0.00055514223640784621, 0.00036361761158332229, 0.000252077094046399, 0.00085106963524594903, 0.00062790961237624288, 0.00091243564384058118, 0.00043220879160799086, 0.00067220674827694893, 0.00080454890849068761, 0.0014441710663959384, 0.00065341556910425425, 0.0013973396271467209, 0.0014982147840783, 0.00070767267607152462, 0.00053244025912135839, 0.00056469294941052794, 0.00091768067795783281, 0.00018686470866668969, 0.0001513308088760823, 0.00055527768563479185, 0.00048673333367332816, 0.0010901490459218621, 0.00032205841853283346, 0.00069029821315780282, 0.001150553347542882, 0.0011236914433538914, 0.0003692277823574841, 0.002067056018859148, 0.00041477297781966627, 0.00075513363117352128, 0.00028553023003041744, 0.0012283588293939829, 0.00036955531686544418, 0.00073702685767784715, 0.00076879904372617602, 0.00053835107246413827, 0.00016314882668666542, 0.00057457899674773216, 0.00047801117761991918, 0.00089810992358252406, 0.000891373201739043, 0.00054556096438318491, 0.0010869584511965513, 0.00039866301813162863, 0.0006045266636647284, 0.00031230074819177389, 0.00069176813121885061, 0.0003183269000146538, 0.00093467289116233587, 0.00025572316371835768, 0.00041604629950597882, 0.00058950507082045078, 0.0011217277497053146, 0.00063476699870079756, 0.0012081165332347155, 0.0012241731164976954, 0.0007137295906431973, 0.00072072050534188747, 0.00082831823965534568, 0.00036338379140943289, 0.00017178924463223666, 0.00067682965891435742, 0.0011633940739557147, 0.00076266453834250569, 0.00065708794863894582, 0.00076500984141603112, 0.0011739800684154034, 0.00093295326223596931, 0.00031970813870429993, 0.00031120682251639664, 0.00067415024386718869, 0.00029375281883403659, 0.0011063417186960578, 0.00061196094611659646, 0.00058939144946634769, 0.0001765326305758208, 0.00041486771078780293, 0.00042865655268542469, 0.00051672861445695162, 0.0010757225099951029, 0.0010015208972617984, 0.00067564868368208408, 0.00081898528151214123, 0.00035529411979950964, } };
const TfArray<96, int> quant13_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data14[16] = { 9046, 15517, -24604, 40261, 18377, -15475, -23437, -6625, -4268, -4060, 10871, 10943, -6239, 11686, 30529, -40106, };
const TfArray<1, int> tensor_dimension14 = { 1, { 16 } };
const TfArray<16, float> quant14_scale = { 16, { 0.00033012588392011821, 0.00022969393467064947, 0.0002516958920750767, 0.00016007032536435872, 0.00026736248400993645, 0.00029873944004066288, 0.00019968667766079307, 0.0003887801431119442, 0.00018656256725080311, 0.00020245079940650612, 0.00035122808185406029, 0.00052003870951011777, 0.00024679623311385512, 0.00035592773929238319, 0.00032833247678354383, 0.00024348802980966866, } };
const TfArray<16, int> quant14_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data15[16*1*1*96] = { 
  /* [0][0][][] */ -4,29,-32,7,55,85,-48,-43,32,11,8,21,6,0,36,52,2,-11,-12,7,90,-25,8,-32,-14,-50,-26,-123,-15,9,26,39,69,2,-10,-7,3,-37,-14,1,-12,-11,-5,-12,-11,9,-21,36,-40,11,20,-18,-53,-27,5,-7,15,-8,15,-47,-54,-6,-3,-31,8,29,29,0,-14,17,-47,-44,-83,-6,-20,26,-18,-85,0,9,10,-10,-41,-28,8,-8,-29,12,-10,17,0,-47,-3,24,-48,127, 
  /* [1][0][][] */ 30,-50,4,74,-40,-22,-43,-71,12,-61,12,54,24,-77,-54,-11,-51,-7,38,-5,-16,-127,-21,-29,82,-72,-65,-31,-17,86,12,54,-13,23,-31,57,-7,-18,11,-65,26,-30,82,-2,-63,-19,68,-49,41,54,0,-71,85,-96,12,9,13,19,-30,-116,39,-86,45,-61,-23,-127,20,21,25,29,-74,13,-97,25,5,54,10,44,55,-46,54,-33,-40,48,-37,58,-40,50,-66,-8,0,29,-25,-51,48,-26, 
  /* [2][0][][] */ 45,34,29,-22,17,13,15,56,67,-33,23,72,2,20,39,10,14,-5,-9,-30,-3,-31,21,-29,21,24,-22,23,13,33,89,-26,63,-36,5,44,23,127,-45,-15,8,7,19,38,0,-56,-27,12,36,2,-40,-30,8,10,33,-40,6,4,-22,68,8,40,60,101,4,-88,13,-77,11,-14,28,34,-1,48,6,-5,40,90,-8,-13,39,47,24,-10,25,1,46,19,-3,10,3,-21,-11,-11,-6,83, 
  /* [3][0][][] */ -13,-54,-36,51,8,-38,-9,-48,-24,15,26,8,-27,-34,28,3,24,-50,10,0,-38,-45,-58,-3,-12,-39,-17,9,15,-76,94,3,-47,-2,-60,69,-46,-15,25,16,2,-85,5,-16,-9,13,-36,37,-127,82,2,-1,-113,-97,-53,-17,54,7,-36,67,24,17,-14,-4,-22,-121,-78,55,41,6,-20,31,-65,-3,-42,-72,-66,-86,40,-61,-23,14,17,47,33,81,-5,46,90,-49,-14,7,-35,9,-43,-42, 
  /* [4][0][][] */ -29,-19,24,-64,3,-30,-38,5,-41,-38,-21,-9,17,63,-8,-30,58,-39,-7,-8,-9,38,60,45,-14,1,30,26,26,-6,-12,10,-52,27,29,2,35,-57,-7,-15,27,16,-75,-23,38,-30,-4,17,13,110,14,17,-24,8,32,-13,16,-44,38,54,-11,33,-14,-18,72,-108,13,-50,-51,-23,-9,-20,12,6,-36,3,-8,101,66,-4,27,-1,127,-29,50,-15,-12,16,69,35,20,-4,-19,16,-20,-15, 
  /* [5][0][][] */ 3,-17,21,-2,-17,-44,5,111,43,-25,-22,-49,-36,34,22,24,-42,-8,-19,-20,-43,7,18,-19,20,40,15,127,69,-1,40,81,-15,24,-20,1,-51,-41,-7,-16,-58,-2,5,-25,69,-10,3,21,30,20,7,42,-47,12,32,-6,-1,11,11,52,-37,44,-35,-26,29,8,-23,3,4,-6,56,0,65,7,32,-28,13,58,21,115,24,-32,7,17,27,-14,50,-10,-6,-3,46,-93,-12,-44,36,-94, 
  /* [6][0][][] */ -13,-28,35,-65,-31,-65,-32,53,-23,9,-36,-43,22,-69,7,-57,-46,-95,1,9,-20,-16,-9,50,104,0,-27,19,5,-20,25,-7,-14,0,-33,3,13,31,61,58,-42,-35,-82,-41,-26,-11,23,-127,59,58,22,13,-9,35,13,-46,59,-1,-11,16,33,32,-35,39,74,92,51,-17,-1,2,46,-59,40,7,45,-4,-15,75,9,9,-60,-20,49,-52,-15,45,33,-15,50,-10,-34,-9,-13,-13,21,36, 
  /* [7][0][][] */ 18,-2,52,-27,8,21,7,-19,19,-19,-18,-20,-23,-80,53,12,10,-13,-10,3,1,-7,-28,-4,-15,-8,1,-34,-16,26,-1,-6,14,0,-40,-34,20,-9,-9,28,-7,-27,-43,22,1,32,-21,86,-13,-2,-26,-30,-26,3,12,-59,24,1,10,-15,-16,0,-5,-8,-39,52,-1,-36,12,9,28,18,-26,-14,3,24,55,8,-15,-19,1,-46,28,-20,-37,127,16,-3,-60,-4,-20,28,-19,-19,20,7, 
  /* [8][0][][] */ -40,44,-2,7,17,-26,15,66,9,52,-20,-18,45,44,72,-17,-5,26,-103,35,21,75,-42,9,-45,14,31,68,49,-94,-4,44,69,29,24,-19,-19,38,-27,67,-16,25,23,-93,-14,6,31,30,-23,-9,-19,62,-127,100,27,-10,26,2,-31,29,-15,13,-18,36,-24,30,48,-30,35,4,82,74,5,39,49,-16,19,-33,-31,-46,-7,-39,17,8,-55,21,73,-31,1,45,5,40,60,-26,-9,12, 
  /* [9][0][][] */ 39,-26,-25,-30,22,71,-3,35,70,-24,34,39,-8,-11,10,60,40,36,11,-19,2,34,-13,-44,44,18,42,-36,-32,-17,-18,30,18,31,31,18,5,55,-41,-9,25,4,-28,-51,38,2,40,-127,-31,-24,-28,8,-21,12,3,-33,-22,21,-23,8,23,-4,19,3,4,112,28,12,39,-1,1,-13,-27,25,-5,-14,56,-2,-11,-16,-8,-5,21,-33,-19,56,14,2,-77,16,-54,43,17,46,2,-2, 
  /* [10][0][][] */ 24,30,-11,34,49,-127,5,6,9,36,32,-11,-15,25,13,-65,2,13,-43,23,-64,12,-12,-4,-51,7,-31,83,21,-3,-5,56,22,-14,25,-13,59,-5,-3,4,-15,65,71,-25,-50,-45,-33,10,3,-3,-2,1,1,17,18,-5,20,37,-25,5,10,31,-19,27,30,28,27,22,36,-12,64,40,-19,-22,-17,-36,18,44,-37,-9,51,-28,-57,-44,60,-43,122,2,-14,27,44,4,82,24,30,-121, 
  /* [11][0][][] */ 59,20,-11,12,-4,5,63,26,-18,-37,-28,-6,-10,12,48,22,-1,6,-108,-20,-8,34,-8,6,-21,-6,-6,6,13,5,-17,-25,13,-5,2,37,-6,21,3,51,-13,5,71,-102,43,-18,3,9,-127,-11,-16,-47,1,19,5,21,3,9,6,18,-6,0,-28,27,-40,56,0,25,21,-20,17,28,-41,-11,7,17,14,-10,-65,14,20,-5,69,27,13,-27,6,9,19,22,-3,21,14,28,-34,32, 
  /* [12][0][][] */ -42,-41,16,-16,-17,54,-8,25,127,27,-33,-8,12,5,-36,-44,10,41,55,108,56,35,-3,-53,16,-10,24,-65,-113,-25,25,-89,-57,-42,-27,4,-11,-37,55,12,-66,-31,-55,-23,0,50,0,-7,-5,0,-43,31,-45,-24,12,8,58,-20,62,26,-41,-33,21,-17,-5,45,-51,12,-17,9,-87,-48,9,3,-98,33,11,9,35,-36,-44,32,36,77,-18,-60,-70,-47,13,10,19,42,-37,-8,-35,62, 
  /* [13][0][][] */ 39,-22,-12,13,42,3,29,2,-22,0,0,-24,7,4,18,-16,10,-72,-25,17,-25,-18,-2,6,13,9,9,13,1,-46,10,24,7,4,19,44,8,-17,23,27,-11,21,0,29,16,36,-7,-127,27,6,13,0,-16,-2,26,10,-2,-2,14,14,16,27,5,8,-1,-11,-29,-42,19,23,12,-36,-33,45,-28,14,-15,3,10,17,9,-13,-27,5,10,30,9,31,10,10,5,-19,-2,7,-25,-6, 
  /* [14][0][][] */ -127,-63,12,64,13,-46,-28,21,-46,22,-28,37,57,-14,-117,-6,74,-47,4,30,-33,-24,7,-4,-123,-16,52,17,-2,-43,1,19,-13,-13,31,-37,34,58,-26,40,7,41,-23,-54,23,94,43,34,-89,19,-13,41,-46,-40,24,9,52,19,30,87,48,66,-2,68,-31,-37,-29,55,-18,92,-28,-55,-65,-30,-16,64,5,27,92,-32,48,36,45,43,40,18,39,50,39,31,50,-24,9,24,37,-42, 
  /* [15][0][][] */ 109,-38,65,-32,23,66,62,6,-16,19,-9,-10,-62,13,14,55,-4,60,14,-55,-14,50,-68,53,48,23,39,-27,46,16,-65,-106,37,-67,88,-22,12,-13,-27,-52,-27,5,-27,22,21,79,-10,11,75,-70,-74,11,12,-78,77,-88,27,-40,2,31,-127,18,17,32,72,7,-24,68,-9,77,-21,36,45,45,42,10,40,-21,24,-5,-37,6,14,56,-28,-20,38,-47,34,-24,45,26,-33,87,-4,15, 
};
const TfArray<4, int> tensor_dimension15 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant15_scale = { 16, { 0.014030350372195244, 0.009761991910636425, 0.010697075165808201, 0.0068029887042939663, 0.011362905614078045, 0.012696425430476665, 0.0084866834804415703, 0.016523156315088272, 0.0079289088025689125, 0.0086041586473584175, 0.014927192591130733, 0.022101644426584244, 0.010488839820027351, 0.015126928687095642, 0.013954130001366138, 0.010348240844905376, } };
const TfArray<16, int> quant15_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data16[96] = { 10804, -11410, 1870, 61738, -864, -4179, -10955, 1042, -2887, 1723, 2464, -1383, 1519, -14875, 5059, -4463, -1438, 16069, 21362, 2877, 1511, -2295, 960, -1819, 21639, -2324, 1159, -2124, -5578, -6149, 12778, -9772, 870, -1167, -1434, 24113, 1620, -4677, 16571, 977, -554, 1980, -9510, -8317, -8706, 58805, 929, 20299, 45489, -12600, -32, 11935, 11122, -400, -6943, 2304, -14478, 2232, 2700, -5284, -1521, -1469, -5713, -3637, -579, 15020, 26438, 35350, -14653, 147, -11711, -439, 39901, 6998, 1266, 1473, 17910, 31901, -855, -11604, -2883, -6429, 491, -3165, 1522, 3418, 2744, -1114, 2642, -1510, 401, -2294, -2495, 1483, 821, 45471, };
const TfArray<1, int> tensor_dimension16 = { 1, { 96 } };
const TfArray<96, float> quant16_scale = { 96, { 0.00015520417946390808, 8.1916470662690699e-05, 0.00021814745559822768, 3.4565811802167445e-05, 0.00013019550533499569, 0.00018911300867330283, 0.00036113255191594362, 7.4462979682721198e-05, 0.00014513036876451224, 0.00029156604432500899, 0.00013953685993328691, 0.000331679213559255, 9.7976517281495035e-05, 0.00029949797317385674, 0.00017478564404882491, 0.00017709343228489161, 8.5264997323974967e-05, 0.0003084997006226331, 8.3170496509410441e-05, 0.00018677154730539769, 4.8267520469380543e-05, 0.00013283264706842601, 0.00014865460980217904, 0.0003025572223123163, 0.00014539927360601723, 0.00029069141601212323, 0.00012703399988822639, 0.0001565711572766304, 0.00011243549670325592, 0.00012609024997800589, 7.4942763603758067e-05, 0.00016665837028995156, 9.8956545116379857e-05, 9.9375341960694641e-05, 0.00016764331667218357, 9.9037504696752876e-05, 0.0002567858318798244, 0.00010690696217352524, 4.277095285942778e-05, 0.00011745895608328283, 0.00019501594942994416, 0.00022038721363060176, 0.00037025674828328192, 0.00014335208106786013, 0.00016415696882177144, 6.4199339249171317e-05, 0.00019339483696967363, 0.0001465195236960426, 5.952469291514717e-05, 0.00017965491861104965, 0.00019084796076640487, 0.00010266342724207789, 0.00019506113312672824, 0.00024407760065514594, 0.00019989005522802472, 0.00047314254334196448, 0.00024913687957450747, 0.00018844775331672281, 9.0366425865795463e-05, 7.7101671195123345e-05, 0.00024597215815447271, 0.0001211760172736831, 0.0003599159826990217, 0.00010459898476256058, 0.00019554083701223135, 0.00018752309551928192, 8.0575562606099993e-05, 5.354783934308216e-05, 0.00026358742616139352, 0.00020863547979388386, 0.0001506843400420621, 8.0446399806533009e-05, 0.00014578693662770092, 0.00015471348888240755, 0.00013448261597659439, 0.00020626078185159713, 0.00055599928600713611, 4.3949152313871309e-05, 0.00021425727754831314, 0.00016329543723259121, 0.00011683075717883185, 0.00034158618655055761, 0.00010865839431062341, 0.00014667784853372723, 9.0472407464403659e-05, 9.7589952929411083e-05, 0.00011400960647733882, 0.00015887840709183365, 0.00018325453856959939, 0.00010355082486057654, 0.00013909816334489733, 9.6232390205841511e-05, 9.4695053121540695e-05, 0.00040983123471960425, 0.0015521784080192447, 7.8297547588590533e-05, } };
const TfArray<96, int> quant16_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data17[1*3*3*96] = { 
  /* [0][0][][] */ -18,1,-18,110,-19,30,-62,-55,16,-10,109,-6,6,-6,-3,48,3,14,-29,5,72,-1,31,-36,3,21,38,52,17,11,23,50,-7,31,5,-16,5,49,-69,-27,20,9,30,16,-84,-56,27,-4,-9,-24,-7,-7,52,5,-12,4,-3,-32,25,-36,33,-4,127,30,-11,-13,12,-52,68,37,0,-5,76,-28,66,3,17,-127,29,67,2,18,127,-13,39,33,-28,-15,37,-7,-17,78,5,16,-1,9, -48,9,-6,13,46,-2,-7,-127,38,14,-127,-6,-15,-12,7,92,18,-31,-11,-14,74,-102,127,24,-59,-24,-108,-15,25,36,-49,20,116,7,-13,-2,-26,127,-79,-127,7,-20,-28,13,43,-127,127,-42,-74,53,46,5,40,-65,32,58,39,40,-108,82,127,32,-2,-17,43,-38,-94,-2,38,-29,-7,45,-45,-39,100,-6,-28,-54,-29,65,-64,64,-20,7,-14,47,54,-36,-29,56,-16,69,-127,-34,25,-127, 0,-9,-20,-72,2,26,39,19,-7,-3,6,62,2,-16,-6,11,-12,15,-14,20,13,21,26,-36,3,-26,4,16,-8,6,48,-75,37,15,13,-24,10,8,-41,-24,9,1,-17,10,19,-34,23,3,10,-8,8,-2,1,5,-8,9,-11,44,1,-7,17,-13,-3,-15,-23,-18,31,-48,-102,-5,55,-21,-127,-20,-16,14,14,-11,9,8,-15,31,-39,-5,-44,26,24,38,-24,-19,22,-11,22,4,-1,-50, 
  /* [0][1][][] */ -42,56,-16,38,-86,-11,-10,-41,29,98,-46,-22,-28,-23,-4,57,127,-24,-96,-11,64,-127,-27,14,-34,-46,-127,-3,34,38,-50,31,-127,-72,-62,2,71,1,-51,47,-18,85,2,1,37,-51,-10,-30,127,43,-1,20,46,11,-41,-15,31,11,-127,127,-31,-85,14,127,-54,-38,-77,127,-35,127,-30,52,-38,-51,31,5,-35,-70,127,51,127,42,4,-2,127,29,-93,49,-38,-36,-107,40,103,102,32,-60, 127,127,127,127,-46,-127,127,25,127,-127,18,-127,-105,127,127,127,-13,-127,-69,-127,127,24,-65,127,127,127,-56,-127,127,127,-127,127,-12,-127,-120,127,-127,-40,104,113,-127,-127,127,127,127,-120,-103,127,-13,127,-127,-127,-127,127,127,-127,127,-127,-49,41,-108,-29,-71,-64,127,127,-61,121,127,-107,-127,127,-35,127,-127,-127,-127,126,-75,127,-43,127,80,127,-41,-127,-24,-101,-127,-125,-25,-127,-18,-127,-127,113, -24,72,-36,2,127,75,-20,47,7,23,-13,-2,-25,-32,-10,-10,-98,-21,-127,42,36,78,-11,-122,-35,-36,116,76,13,30,74,11,119,-50,127,-5,58,9,-107,15,37,23,-23,-2,-20,-57,-11,-40,83,15,-10,42,-10,-4,-79,-13,20,21,122,-96,9,127,-6,-32,-105,-28,-70,102,17,-14,117,27,-17,-50,7,43,-25,-7,-40,-7,-50,9,49,21,-94,39,127,-44,32,-22,127,-10,-110,34,37,14, 
  /* [0][2][][] */ -6,-46,-20,-60,-6,15,40,31,-1,9,-16,52,25,-37,-6,6,40,5,11,26,-4,29,-15,-26,-1,-19,5,5,-12,-11,47,-71,-36,67,-31,-27,31,-31,-75,21,10,9,-32,17,15,-74,-10,0,-8,8,19,-6,5,-2,-27,8,-3,46,-54,29,1,-7,-1,20,-6,-10,14,-53,-52,13,-31,-7,-123,-30,-6,15,13,-12,58,20,24,22,-44,14,14,26,-20,14,6,28,20,0,26,41,-3,-32, -29,-15,-26,25,-44,80,-25,65,6,-6,58,-11,127,-7,-16,-17,2,-36,-64,25,-15,76,-42,-119,-47,-41,95,78,15,40,55,1,-119,62,-11,-25,-27,-22,-127,-2,45,-13,-14,34,-25,-45,-16,-45,-59,31,66,28,-14,-83,28,53,21,27,66,-61,22,-52,-14,4,19,-26,-127,-53,-8,-26,-63,25,36,-39,-33,-9,-44,24,-52,-2,49,32,16,8,4,61,-99,127,17,127,-34,-14,123,-21,52,75, -10,-40,-25,27,14,69,-44,14,6,-8,-1,16,11,-52,-5,-13,-41,-5,11,20,-13,5,-19,0,-5,20,-6,58,-5,-6,35,31,17,40,26,-24,-4,-22,-26,13,11,-10,21,7,-70,-31,-11,6,1,-15,2,-1,-12,6,-19,-5,0,-49,8,-36,-15,53,4,-24,-9,-3,34,-55,44,8,58,-19,26,-49,-22,19,11,10,-2,18,-32,30,85,-16,-19,55,33,-6,114,11,0,-13,13,-22,-2,-55, 
};
const TfArray<4, int> tensor_dimension17 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant17_scale = { 96, { 0.0065961773507297039, 0.0034814500249922276, 0.009271266870200634, 0.0014690470416098833, 0.0055333087220788002, 0.0080373026430606842, 0.015348132699728012, 0.0031646767165511847, 0.0061680404469370842, 0.012391556985676289, 0.0059303161688148975, 0.014096366241574287, 0.0041640019044280052, 0.012728664092719555, 0.0074283895082771778, 0.0075264708139002323, 0.0036237621679902077, 0.0131112365052104, 0.0035347458906471729, 0.0079377908259630203, 0.0020513695199042559, 0.005645387340337038, 0.0063178208656609058, 0.012858682312071323, 0.006179469171911478, 0.012354385107755661, 0.0053989449515938759, 0.0066542741842567921, 0.0047785085625946522, 0.0053588352166116238, 0.0031850673258304596, 0.0070829805918037891, 0.004205652978271246, 0.0042234519496560097, 0.0071248407475650311, 0.0042090937495231628, 0.010913397185504436, 0.0045435456559062004, 0.0018177655292674899, 0.0049920054152607918, 0.0082881776615977287, 0.0093664564192295074, 0.015735911205410957, 0.0060924636200070381, 0.0069766710512340069, 0.0027284717652946711, 0.0082192802801728249, 0.0062270797789096832, 0.002529799472540617, 0.0076353340409696102, 0.0081110382452607155, 0.0043631955049932003, 0.0082900980487465858, 0.010373298078775406, 0.0084953270852565765, 0.020108558237552643, 0.010588317178189754, 0.0080090295523405075, 0.0038405731320381165, 0.0032768209930509329, 0.010453816503286362, 0.005149980541318655, 0.015296428464353085, 0.004445456899702549, 0.0083104856312274933, 0.0079697314649820328, 0.0034244614653289318, 0.0022757831029593945, 0.011202465742826462, 0.0088670076802372932, 0.0064040846191346645, 0.0034189717844128609, 0.0061959447339177132, 0.0065753231756389141, 0.0057155108079314232, 0.0087660830467939377, 0.023629968985915184, 0.0018678389023989439, 0.0091059338301420212, 0.006940055638551712, 0.0049653071910142899, 0.014517412520945072, 0.0046179816126823425, 0.0062338085845112801, 0.0038450772408396006, 0.0041475729085505009, 0.0048454082570970058, 0.0067523322068154812, 0.0077883177436888218, 0.0044009098783135414, 0.005911671556532383, 0.0040898765437304974, 0.0040245396085083485, 0.017417827621102333, 0.065967582166194916, 0.0033276455942541361, } };
const TfArray<96, int> quant17_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data18[96] = { 12961, 2058, 7510, -939, 6248, 5138, 16821, 7614, -1965, 12020, 5876, 3207, 13881, 29736, -447, -4073, 9217, 10533, 2382, -192, -648, 18579, 6373, 2890, 5728, 6643, 8301, 7620, 200, -498, 11150, 9969, 14565, 1964, 5220, -596, 39079, 11464, 654, 3958, 1023, 9665, 11527, 6377, 5575, 16442, 16539, 8007, 5577, 5080, 393, -1027, 27979, 10273, 10185, 15427, -148, 6680, 2989, 5590, 21989, 7362, 4337, 12524, 6632, 4271, 6509, -604, 21905, 7884, 13461, -928, -1659, 4643, 1633, 5370, 23521, 17130, 15183, -2274, 5717, -5724, -1646, 979, 8847, 4526, 7060, 5222, 8989, 5457, 9135, 4888, 17339, 19386, -8453, 19000, };
const TfArray<1, int> tensor_dimension18 = { 1, { 96 } };
const TfArray<96, float> quant18_scale = { 96, { 0.00020412307640071958, 0.00020532998314592987, 0.00017309946997556835, 0.00065644865389913321, 0.00026762954075820744, 0.00017805788957048208, 0.00018623567302711308, 0.00046220986405387521, 0.00025084626395255327, 0.00014410779112949967, 0.00022615284251514822, 0.00026670860825106502, 0.00020498571393545717, 0.00016449349641334265, 0.00023079069796949625, 0.00020465435227379203, 0.00023703469196334481, 0.00021667762484867126, 0.0002201608003815636, 0.00056923914235085249, 0.00027300452347844839, 0.00013692298671230674, 0.00022934479056857526, 0.00025374320102855563, 0.00029795090085826814, 0.00030034617520868778, 0.00018294434994459152, 0.00011967302998527884, 0.00040199956856667995, 0.00018314538465347141, 0.00014045901480130851, 0.00018446260946802795, 0.00013691892672795802, 0.00058203365188091993, 0.00030686435638926923, 0.00037051617982797325, 5.9916885220445693e-05, 0.00022033417189959437, 0.00058892130618914962, 0.00024154387938324362, 0.00045652425615116954, 0.00020084224524907768, 0.00017942851991392672, 0.0001341645693173632, 0.00019935786258429289, 0.00019150091975461692, 0.0001748662325553596, 0.00017704020137898624, 0.00027261502691544592, 0.00017682535690255463, 0.00053033692529425025, 0.00062464689835906029, 9.8145064839627594e-05, 0.00016121786029543728, 0.000237858752370812, 0.00012215794413350523, 0.00038551635225303471, 0.0002706068626139313, 0.00029238042770884931, 0.0003063034382648766, 7.6443597208708525e-05, 0.00017671349633019418, 0.00025706528685986996, 0.00022437791631091386, 0.00014859496150165796, 0.00027471350040286779, 0.00029127250309102237, 0.00049024372128769755, 0.00011990006169071421, 0.00014343787916004658, 0.00013865555229131132, 0.00048386561684310436, 0.00023164208687376231, 0.00026939844246953726, 0.00031949885305948555, 0.00025065478985197842, 9.8751770565286279e-05, 0.00025691473274491727, 0.00010917731560766697, 0.00052188563859090209, 0.00019093521405011415, 0.00035642189322970808, 0.00024525253684259951, 0.00033174818963743746, 0.00018575647845864296, 0.00033531521330587566, 0.00020614413369912654, 0.00024572957772761583, 0.00018604272918310016, 0.00030024666921235621, 0.00014983433356974274, 0.00034548487747088075, 0.00011933552013942972, 0.00014185464533511549, 0.00034172006417065859, 0.00016989251889754087, } };
const TfArray<96, int> quant18_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data19[96*1*1*16] = { 
  /* [0][0][][] */ -5,-8,127,91,93,27,-17,-68,72,-58,-14,-35,45,49,16,-110, 
  /* [1][0][][] */ -14,81,26,32,127,54,68,19,78,16,10,75,-52,32,115,-123, 
  /* [2][0][][] */ 54,-51,-48,42,-92,80,-45,68,1,-70,57,53,-28,-66,88,-127, 
  /* [3][0][][] */ 127,111,30,26,-97,-5,-122,-28,-4,-39,115,-94,-113,117,-92,-84, 
  /* [4][0][][] */ -9,19,79,89,-49,49,-65,3,-47,-70,-1,65,-18,-127,60,21, 
  /* [5][0][][] */ 127,-40,3,31,-38,-77,-22,25,9,13,-58,0,-9,16,-41,1, 
  /* [6][0][][] */ -83,-60,-24,50,7,-63,-38,-19,-95,-23,-127,-61,61,-14,58,91, 
  /* [7][0][][] */ -21,44,-52,29,12,-127,-7,66,15,-63,30,2,32,39,-36,29, 
  /* [8][0][][] */ 21,-60,-14,-21,4,4,-59,-105,-17,5,-85,-20,-127,-11,32,22, 
  /* [9][0][][] */ 46,-40,80,89,-6,80,-4,-63,127,-89,24,18,-35,21,-37,-6, 
  /* [10][0][][] */ -68,-81,56,-37,79,0,23,78,127,-33,-42,-18,-1,-18,-121,17, 
  /* [11][0][][] */ 85,-40,-127,69,31,0,0,69,-52,10,-24,-1,-38,13,-57,-24, 
  /* [12][0][][] */ 76,-127,-53,17,-75,-27,-86,-19,99,47,-91,-51,-28,-41,42,83, 
  /* [13][0][][] */ 73,-54,101,-89,127,25,-50,-105,94,-124,32,0,53,37,-1,45, 
  /* [14][0][][] */ -52,38,-58,-45,73,-127,39,-67,56,68,1,-58,3,66,15,6, 
  /* [15][0][][] */ 29,34,112,-21,109,-25,-75,18,0,-116,-78,12,-127,-47,-2,98, 
  /* [16][0][][] */ -60,-2,23,26,-48,63,52,86,5,-24,127,-36,30,33,34,-53, 
  /* [17][0][][] */ -40,-16,-23,-3,-2,46,71,42,-10,127,-24,24,-17,82,78,-11, 
  /* [18][0][][] */ -22,127,17,-42,42,-28,62,-39,-4,66,-18,53,-38,-36,40,-102, 
  /* [19][0][][] */ -10,-59,31,34,-32,78,-33,4,19,-2,-42,-24,-127,30,-14,45, 
  /* [20][0][][] */ 72,-36,-20,-27,-38,17,-11,-67,-4,14,-127,-1,60,20,37,24, 
  /* [21][0][][] */ 43,25,127,43,12,105,-12,-48,-3,15,-21,15,-20,104,-13,-73, 
  /* [22][0][][] */ -34,33,49,-39,24,-6,29,127,38,-11,41,11,-21,27,9,11, 
  /* [23][0][][] */ -31,51,-30,-6,5,-127,12,33,-4,-12,3,-20,-44,18,-12,-5, 
  /* [24][0][][] */ 1,-26,-10,-23,62,19,-25,-47,55,10,68,89,-18,38,127,24, 
  /* [25][0][][] */ -55,-127,-50,42,-39,-11,-31,-38,-48,20,-56,5,13,40,-3,21, 
  /* [26][0][][] */ -18,34,19,-25,18,-3,-47,28,-80,-53,27,21,-19,-127,23,-24, 
  /* [27][0][][] */ -94,51,-28,0,64,3,34,20,1,-43,127,-1,-37,0,-16,-8, 
  /* [28][0][][] */ -29,-1,29,7,11,12,-2,82,30,-5,-7,5,-127,3,-13,19, 
  /* [29][0][][] */ -51,101,69,-64,69,23,16,-30,-127,16,-3,30,-8,68,-89,47, 
  /* [30][0][][] */ -74,-6,-127,-78,17,-56,33,44,-14,0,31,-40,-46,-17,-25,44, 
  /* [31][0][][] */ 127,-4,-89,20,36,-9,-60,13,-52,-18,-55,-27,-19,-37,-64,-11, 
  /* [32][0][][] */ -127,36,24,90,-1,79,0,-6,-7,-6,39,28,7,22,-7,-19, 
  /* [33][0][][] */ -45,-16,127,-4,-83,66,30,-35,-17,17,-16,54,-4,22,37,24, 
  /* [34][0][][] */ -37,13,-62,-127,37,13,17,-37,8,-37,-57,-73,2,-15,-6,55, 
  /* [35][0][][] */ -31,-66,67,81,51,-25,4,-39,-96,71,-9,13,-45,127,-20,-67, 
  /* [36][0][][] */ -77,38,17,-21,21,60,115,127,29,-4,124,39,49,62,42,-38, 
  /* [37][0][][] */ -28,23,127,-42,-44,-87,-21,-76,40,14,-6,23,-36,-47,48,-5, 
  /* [38][0][][] */ -10,29,30,1,13,-102,-14,-15,-20,24,97,-27,127,36,-3,53, 
  /* [39][0][][] */ -6,-4,-44,-44,-58,-127,91,88,-1,31,-18,-26,-5,-4,49,48, 
  /* [40][0][][] */ 63,-25,11,-10,20,64,-32,26,10,-30,28,-5,127,32,1,-41, 
  /* [41][0][][] */ 13,-42,4,-127,47,-18,21,-34,-4,-35,-2,-12,-7,-11,-9,14, 
  /* [42][0][][] */ 37,4,-33,88,-71,-2,-31,35,-52,-15,28,-58,-20,127,-9,21, 
  /* [43][0][][] */ 19,43,-60,127,-17,53,54,-63,-25,70,-7,-7,32,-48,49,46, 
  /* [44][0][][] */ -46,-30,-112,30,127,105,-25,80,7,-62,32,-47,20,5,-64,-36, 
  /* [45][0][][] */ -30,68,24,-114,1,18,115,17,-9,41,-42,30,-35,-127,43,-95, 
  /* [46][0][][] */ -17,57,94,-6,41,39,-101,41,30,-38,-3,37,-21,127,89,27, 
  /* [47][0][][] */ -2,2,-7,-75,-53,8,-17,50,-28,-35,43,16,-19,-127,36,40, 
  /* [48][0][][] */ -1,20,26,-127,-16,-10,-1,13,12,-32,38,-23,-16,52,-37,58, 
  /* [49][0][][] */ 70,-67,-30,127,94,10,11,86,-111,19,26,60,8,68,98,-10, 
  /* [50][0][][] */ -13,-21,13,-30,-47,127,-28,-1,1,-22,68,29,95,7,-33,-56, 
  /* [51][0][][] */ -6,100,67,-26,47,-1,-79,3,104,-9,62,127,-37,48,58,-50, 
  /* [52][0][][] */ -31,38,127,4,75,-40,0,-28,-26,11,-23,54,-5,104,-117,-23, 
  /* [53][0][][] */ 73,-51,-63,-127,-105,-10,-10,-63,-45,-12,-58,13,44,-43,74,4, 
  /* [54][0][][] */ -11,-22,0,-20,20,21,12,27,67,4,6,17,40,127,-3,29, 
  /* [55][0][][] */ -29,2,-75,1,33,-8,-70,-127,46,-70,-23,-28,-41,-60,-43,0, 
  /* [56][0][][] */ 57,48,42,49,19,2,37,127,7,-29,35,-38,41,-7,-81,18, 
  /* [57][0][][] */ 17,17,127,-5,3,-22,37,0,23,29,-48,30,21,-59,52,-22, 
  /* [58][0][][] */ 85,127,11,29,-93,-61,-74,16,-5,13,88,-16,-68,-44,15,-31, 
  /* [59][0][][] */ 127,-54,18,32,-45,-28,-46,21,-17,-1,-83,-40,-24,19,-27,-8, 
  /* [60][0][][] */ -127,56,-27,-9,36,-27,52,8,16,73,106,-11,-26,-28,66,-11, 
  /* [61][0][][] */ -127,33,-24,15,56,77,7,3,126,-108,78,51,18,27,-90,23, 
  /* [62][0][][] */ -37,8,-122,2,60,127,-59,118,48,-15,72,-47,-64,-23,-91,7, 
  /* [63][0][][] */ -44,19,127,-45,-67,-101,57,-58,-27,28,-19,43,15,-83,101,40, 
  /* [64][0][][] */ -5,52,-61,5,27,-25,87,-127,0,124,49,-27,-38,-94,-4,120, 
  /* [65][0][][] */ 3,32,18,-30,80,-3,-15,-127,-22,-83,-39,-57,16,-13,30,-16, 
  /* [66][0][][] */ -127,-28,-4,33,-32,64,17,9,-43,-57,-68,38,85,42,35,64, 
  /* [67][0][][] */ 24,-101,37,118,15,-38,1,79,38,49,-13,-40,-1,-14,-127,-58, 
  /* [68][0][][] */ 23,-11,8,127,-23,-17,-45,-22,-95,32,-30,-9,-31,-61,-41,-76, 
  /* [69][0][][] */ 86,53,13,127,13,-20,94,-91,26,89,-22,78,-14,-14,59,3, 
  /* [70][0][][] */ -29,-2,40,-74,122,-8,74,75,-7,14,127,-17,-75,29,-34,25, 
  /* [71][0][][] */ 9,45,12,102,20,-127,-38,47,30,-90,27,-5,-9,-82,-36,1, 
  /* [72][0][][] */ -122,-54,-3,29,-19,34,-64,-3,-35,-49,-83,18,70,-6,39,127, 
  /* [73][0][][] */ -18,-105,6,127,-10,21,-47,-7,58,-5,25,37,84,112,-93,-61, 
  /* [74][0][][] */ 11,-44,38,-73,-71,-7,66,7,-23,17,-78,-17,-127,3,43,82, 
  /* [75][0][][] */ -3,18,-23,77,-21,-51,-51,-62,-127,-27,-10,-32,-19,-75,21,-27, 
  /* [76][0][][] */ -91,-11,44,-21,87,-10,-32,-98,65,-127,29,67,-92,-111,17,-17, 
  /* [77][0][][] */ 127,3,-37,89,-70,11,-21,-9,65,22,7,29,-9,-6,-75,-8, 
  /* [78][0][][] */ 16,7,25,-10,4,-13,-127,53,75,-35,-88,-52,27,105,92,-42, 
  /* [79][0][][] */ 8,2,18,27,19,67,-15,-35,4,-51,62,-26,127,9,-33,-52, 
  /* [80][0][][] */ -127,-49,-27,121,8,89,10,-18,-37,40,-76,9,100,-53,-6,-8, 
  /* [81][0][][] */ 15,-30,-30,-16,127,103,-53,32,27,-117,14,-51,-28,21,-83,69, 
  /* [82][0][][] */ 69,127,-29,2,-122,-45,-25,12,-47,-5,107,-64,-57,106,37,-8, 
  /* [83][0][][] */ 127,15,42,-8,28,5,4,64,61,-3,110,-58,-69,-12,-33,-117, 
  /* [84][0][][] */ 52,-36,-51,-20,-13,12,-25,-127,-50,-63,-26,-24,10,9,4,-25, 
  /* [85][0][][] */ 14,-9,-78,-62,-36,-43,107,81,-35,127,-53,-16,11,64,82,31, 
  /* [86][0][][] */ 57,-35,19,22,17,10,-35,-22,24,3,-127,43,37,-35,20,42, 
  /* [87][0][][] */ -10,-29,4,-61,-69,116,-101,87,16,-30,36,-10,48,-127,35,28, 
  /* [88][0][][] */ -82,-53,-89,-29,58,38,-28,-127,43,-4,45,6,-28,-29,7,-51, 
  /* [89][0][][] */ 57,-34,55,-123,22,12,-127,67,114,-102,95,-55,-65,-20,55,15, 
  /* [90][0][][] */ -26,-20,2,120,8,10,66,-69,90,127,-56,64,22,17,-18,-11, 
  /* [91][0][][] */ 30,-37,-61,13,26,-127,15,6,25,12,-73,24,43,14,-1,77, 
  /* [92][0][][] */ -29,19,110,86,33,11,-21,25,-47,-16,-117,43,84,127,-2,-2, 
  /* [93][0][][] */ 127,-14,-66,-36,-24,-51,31,25,11,39,-83,13,3,10,-2,47, 
  /* [94][0][][] */ 20,-26,55,68,70,-4,3,67,-17,3,21,26,10,127,-45,-66, 
  /* [95][0][][] */ -96,48,75,10,47,58,13,-5,17,-6,127,-32,-22,18,2,-18, 
};
const TfArray<4, int> tensor_dimension19 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant19_scale = { 96, { 0.00074506615055724978, 0.00074947148095816374, 0.00063182745361700654, 0.0023960920516401529, 0.00097687006928026676, 0.00064992607804015279, 0.00067977566504850984, 0.0016871043480932713, 0.00091560970759019256, 0.00052600540220737457, 0.00082547665806487203, 0.00097350851865485311, 0.0007482148939743638, 0.00060041493270546198, 0.00084240519208833575, 0.00074700539698824286, 0.00086519628530368209, 0.00079089129576459527, 0.00080360518768429756, 0.0020777701865881681, 0.00099648919422179461, 0.00049978028982877731, 0.00083712750347331166, 0.00092618376947939396, 0.0010875455336645246, 0.0010962884407490492, 0.00066776206949725747, 0.00043681648094207048, 0.0014673317782580853, 0.00066849583527073264, 0.00051268708193674684, 0.00067330384626984596, 0.00049976544687524438, 0.0021244711242616177, 0.0011200803564861417, 0.0013524148380383849, 0.00021870160708203912, 0.00080423802137374878, 0.0021496117115020752, 0.00088165519991889596, 0.0016663514543324709, 0.00073309085564687848, 0.0006549289682880044, 0.00048971181968227029, 0.00072767277015373111, 0.00069899426307529211, 0.00063827628036960959, 0.00064621143974363804, 0.00099506753031164408, 0.00064542720792815089, 0.0019357738783583045, 0.0022800129372626543, 0.00035823762300424278, 0.00058845855528488755, 0.00086820416618138552, 0.00044588666060008109, 0.0014071667101234198, 0.00098773755598813295, 0.0010672127828001976, 0.0011180329602211714, 0.00027902546571567655, 0.00064501893939450383, 0.0009383096476085484, 0.00081899802898988128, 0.00054238393204286695, 0.0010027270764112473, 0.0010631688637658954, 0.0017894302727654576, 0.00043764518341049552, 0.00052356015658006072, 0.00050610426114872098, 0.001766149653121829, 0.00084551284089684486, 0.00098332669585943222, 0.0011661973549053073, 0.00091491074999794364, 0.0003604521625675261, 0.00093776010908186436, 0.00039850626490078866, 0.0019049257971346378, 0.00069692940451204777, 0.0013009695103392005, 0.00089519214816391468, 0.001210908405482769, 0.00067802658304572105, 0.0012239284114912152, 0.0007524432148784399, 0.00089693331392481923, 0.00067907141055911779, 0.0010959252249449492, 0.00054690777324140072, 0.0012610484845936298, 0.0004355845449026674, 0.00051778124179691076, 0.0012473065871745348, 0.00062012177659198642, } };
const TfArray<96, int> quant19_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data20[16] = { -29675, 7687, 6838, -9193, 4614, -13749, -12456, -43499, 14684, 40028, 32761, -11277, -10713, -23875, 45196, -38830, };
const TfArray<1, int> tensor_dimension20 = { 1, { 16 } };
const TfArray<16, float> quant20_scale = { 16, { 0.00061858975095674396, 0.00068432535044848919, 0.0010877893073484302, 0.00090271350927650928, 0.00060408958233892918, 0.0010249799815937877, 0.00072175642708316445, 0.00049846613546833396, 0.00067987304646521807, 0.00049529696116223931, 0.00053060671780258417, 0.00045573117677122355, 0.00063288141973316669, 0.0012141603510826826, 0.00036425673170015216, 0.0005755438469350338, } };
const TfArray<16, int> quant20_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data21[16*1*1*48] = { 
  /* [0][0][][] */ -7,8,-24,-7,3,-13,-5,90,-59,8,35,-14,5,-15,14,13,-2,-17,-18,-11,57,-8,5,124,-22,67,7,-16,1,-5,44,-15,-23,42,32,-42,16,45,17,-38,-102,-25,30,45,21,16,-127,-36, 
  /* [1][0][][] */ -39,-21,18,0,-15,8,-9,50,-63,-17,3,-54,-10,-20,6,-22,-42,127,-23,9,-2,-2,-19,-17,44,-51,13,15,-28,-107,-31,6,-25,-1,27,-9,17,-50,-1,15,-25,-22,118,11,-8,-4,22,-4, 
  /* [2][0][][] */ -21,-2,-3,-35,-1,-57,-3,-24,0,9,26,19,21,15,-14,-4,-8,-13,-25,-21,10,5,13,-127,-13,56,-11,-2,7,-20,-13,0,-6,47,13,0,16,9,17,1,-46,-1,-13,4,-7,0,25,15, 
  /* [3][0][][] */ 2,37,4,-37,-6,1,0,-3,-28,-1,-5,46,-127,8,4,3,17,8,-24,-16,-32,-2,-2,19,-12,-9,12,30,-18,29,14,17,7,-1,11,18,-13,28,43,15,13,9,17,-33,26,-2,-5,10, 
  /* [4][0][][] */ 25,-34,24,1,8,39,33,-25,-37,0,1,-29,10,7,7,20,33,-4,-76,6,-9,9,26,56,0,-20,9,37,9,-91,8,2,16,-45,34,-127,22,27,-7,32,-28,20,7,-23,-22,-14,23,3, 
  /* [5][0][][] */ 31,4,-3,55,-2,2,5,32,-1,0,29,12,-7,49,2,-5,2,10,27,9,17,-4,18,-22,2,-45,6,-10,1,-1,-12,6,74,-127,7,26,-10,1,21,19,-81,59,8,-5,-5,11,-106,-21, 
  /* [6][0][][] */ 28,8,8,2,-21,0,-1,-14,-6,-3,-1,1,-31,7,0,-3,-6,-22,127,19,2,20,26,-39,2,0,31,-6,-21,6,-7,1,5,-14,37,-44,1,-37,78,27,-3,-6,-5,4,-4,-9,4,-12, 
  /* [7][0][][] */ -67,-31,12,24,-9,105,-1,36,-16,32,14,127,102,-40,-26,3,27,-15,17,-26,-16,-19,-7,61,0,-68,-68,-21,-7,-26,-5,-5,12,-8,-36,-8,12,-65,100,22,16,50,-80,-49,12,10,22,-2, 
  /* [8][0][][] */ -47,-53,25,9,-15,7,1,9,1,-89,1,42,48,-2,8,-9,4,47,-5,9,-24,18,23,-22,12,-30,10,30,9,109,-32,24,-17,24,-1,-123,-113,63,13,35,21,-21,127,0,14,47,34,33, 
  /* [9][0][][] */ -3,25,14,24,4,-53,-38,-32,80,-64,32,45,-68,5,18,0,6,39,-56,-15,56,4,-12,-32,-21,-2,65,-42,6,26,11,8,-3,16,107,-103,-17,-125,-127,24,-40,13,84,15,27,-12,-1,-29, 
  /* [10][0][][] */ -37,-22,-3,-121,68,108,11,1,11,22,14,8,53,-54,-31,25,55,-62,77,-21,35,-16,62,46,-31,-127,5,-49,55,14,21,-50,-37,-70,26,-10,28,-63,9,-15,-26,-61,-28,22,-3,26,25,-36, 
  /* [11][0][][] */ -25,58,33,64,17,-48,-75,-51,17,51,6,5,-21,70,23,-94,37,28,-15,-16,-75,-88,37,-22,14,-58,35,4,59,-32,5,-91,73,-45,-25,-127,88,20,24,-92,-26,87,107,-102,-35,-44,58,55, 
  /* [12][0][][] */ 127,1,-37,19,21,10,-7,103,6,-2,-65,-19,-10,28,-14,-7,-28,-6,8,7,13,2,-9,30,4,36,2,8,-10,10,8,7,-5,-55,-11,24,-3,-12,-16,-17,-5,-79,-8,-124,-35,-6,62,-20, 
  /* [13][0][][] */ 11,8,-8,6,0,-5,1,-4,2,0,9,24,-13,5,8,8,11,-2,9,1,9,-10,6,-5,-1,4,22,127,0,3,8,4,10,1,-32,16,5,-3,11,-11,-9,4,6,-1,7,-8,-6,-11, 
  /* [14][0][][] */ 64,-39,32,-51,67,10,38,-120,-41,-80,-19,127,-66,-1,62,26,22,24,-38,84,33,49,71,-2,41,65,-46,-125,37,-49,49,41,-27,79,-112,-38,-50,9,73,1,-22,5,71,-30,-15,-9,20,-44, 
  /* [15][0][][] */ -23,-49,-68,-16,20,38,81,-54,6,-4,5,-15,57,42,-101,67,59,29,82,-56,-79,-6,43,-31,-59,19,30,60,68,61,27,-57,21,44,100,85,-37,-102,-4,-8,69,57,127,-56,11,-9,3,83, 
};
const TfArray<4, int> tensor_dimension21 = { 4, { 16,1,1,48 } };
const TfArray<16, float> quant21_scale = { 16, { 0.026290064677596092, 0.029083827510476112, 0.046231042593717575, 0.038365323096513748, 0.025673806667327881, 0.043561648577451706, 0.03067464753985405, 0.021184811368584633, 0.028894603252410889, 0.021050121635198593, 0.022550785914063454, 0.019368574023246765, 0.026897460222244263, 0.051601815968751907, 0.015480911359190941, 0.024460611864924431, } };
const TfArray<16, int> quant21_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data22[48] = { 337, 39107, -1544, 48774, 5761, 143647, -2544, 44874, -350, 31736, 28319, 2426, 67, 31381, 2425, -4843, -360, -718, 1136, -2493, 682, -4545, -500, -15677, -4019, 43093, 125742, 94646, 3598, 1743, -846, 3092, 26202, 1233, 36084, -2580, 52853, 1861, 49092, -957, 465, 57604, -1708, 134, 39040, -938, 4487, 48801, };
const TfArray<1, int> tensor_dimension22 = { 1, { 48 } };
const TfArray<48, float> quant22_scale = { 48, { 8.3301885752007365e-05, 4.2440711695235223e-05, 0.00012936054554302245, 4.859753607888706e-05, 0.00010429773101350293, 4.3706932046916336e-05, 0.0001907164987642318, 0.00013298250269144773, 8.8559994765091687e-05, 4.4526594138005748e-05, 4.7266137698898092e-05, 9.499132283963263e-05, 4.9273061449639499e-05, 3.7684156268369406e-05, 0.00013695820234715939, 0.00016965823306236416, 0.00017252290854230523, 6.0168924392201006e-05, 0.0001545612612972036, 0.00015671514847781509, 7.2440372605342418e-05, 0.00013127963757142425, 6.26427645329386e-05, 0.00010483639925951138, 0.00011779888882301748, 0.0001017320464598015, 2.4860481062205508e-05, 8.1002413935493678e-05, 0.00011594591342145577, 0.00011549521877896041, 9.2239657533355057e-05, 0.00015365291619673371, 4.662459105020389e-05, 0.0001535234332550317, 3.01477120956406e-05, 5.7296943850815296e-05, 0.0001095724364859052, 8.5565479821525514e-05, 0.00012289894220884889, 8.3241968241054565e-05, 0.0001172637494164519, 0.00010350881348131225, 0.00010245048179058358, 0.0001054009553627111, 3.0596253054682165e-05, 0.00011456076754257083, 9.4961178547237068e-05, 3.7117792089702561e-05, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data23[1*3*3*48] = { 
  /* [0][0][][] */ 69,-96,95,69,51,-33,106,-67,61,-87,-88,51,52,-40,-72,-90,97,81,54,76,66,-80,-86,54,-36,-40,-74,-70,-69,65,-58,-111,-18,41,73,66,-65,51,-49,-19,49,-70,59,62,-99,7,78,-38, 77,-97,127,78,-78,-70,-55,-83,101,-103,-61,75,82,-122,-96,100,-37,94,87,127,83,-121,55,71,-53,-73,-71,-82,53,84,-29,-127,-95,74,89,86,-87,88,-86,-13,77,-90,87,93,-77,-127,99,-107, 34,-51,73,40,21,-45,-45,-37,42,-35,4,33,32,-87,-51,-2,-56,41,35,75,35,-53,29,21,-24,-42,-47,-25,29,35,87,-84,-94,47,36,33,-34,38,-37,-7,38,-40,42,45,-6,-5,40,-72, 
  /* [0][1][][] */ 93,-111,-45,84,52,-80,127,-85,89,-113,-74,86,84,-119,-19,-127,127,109,74,-41,81,109,-127,75,68,-73,-99,-103,-127,88,-65,-11,-85,67,109,95,-86,80,-80,92,87,-100,87,90,-97,105,98,-84, 127,-127,-71,127,-127,-127,-88,-127,127,-127,-127,127,127,-127,-20,104,-63,127,127,-55,127,127,71,127,127,-127,-127,-127,50,127,-28,13,-127,127,127,127,-127,127,-127,127,127,-127,127,127,-127,-8,127,-127, 63,-82,-37,62,39,-65,-46,-65,52,-47,-62,57,50,-59,-13,12,-58,52,58,-27,54,68,49,65,68,-61,-65,-48,33,59,127,18,-61,68,47,45,-52,60,-63,59,63,-57,57,62,-61,-65,53,-52, 
  /* [0][2][][] */ 45,-55,-49,49,24,-55,66,-43,39,-71,-10,40,58,-71,78,-77,71,47,38,-34,23,-11,-82,32,-26,-43,-45,-54,-74,35,-37,86,-82,34,54,42,-24,37,-45,-82,49,-51,44,45,-26,14,38,-71, 74,-76,-53,76,-59,-64,-69,-67,48,-76,-70,62,76,-45,127,35,-45,63,62,-47,53,-16,39,67,-46,-63,-79,-65,28,62,-24,113,-56,63,62,56,-48,60,-68,-102,73,-70,64,65,-83,52,60,-52, 41,-41,-27,48,26,-23,-14,-37,16,-26,-50,28,32,-1,70,28,-32,19,32,-28,31,3,35,44,-21,-25,-47,-26,30,34,60,69,-4,37,14,27,-25,29,-32,-51,30,-34,27,35,-60,9,30,-5, 
};
const TfArray<4, int> tensor_dimension23 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant23_scale = { 48, { 0.0035403301008045673, 0.001803730265237391, 0.0054978230036795139, 0.002065395237877965, 0.0044326535426080227, 0.0018575446447357535, 0.0081054512411355972, 0.005651756189763546, 0.0037637995555996895, 0.0018923801835626364, 0.0020088108722120523, 0.0040371310897171497, 0.0020941051188856363, 0.0016015765722841024, 0.0058207232505083084, 0.0072104749269783497, 0.00733222346752882, 0.0025571791920810938, 0.0065688532777130604, 0.0066603939048945904, 0.003078715642914176, 0.0055793845094740391, 0.0026623173616826534, 0.0044555468484759331, 0.0050064525566995144, 0.0043236119672656059, 0.0010565704433247447, 0.0034426024649292231, 0.0049277013167738914, 0.0049085468053817749, 0.0039201853796839714, 0.0065302490256726742, 0.0019815450068563223, 0.0065247458405792713, 0.0012812777422368526, 0.0024351200554519892, 0.0046568284742534161, 0.0036365326959639788, 0.0052232048474252224, 0.003537783632054925, 0.0049837091937661171, 0.0043991245329380035, 0.0043541453778743744, 0.0044795405119657516, 0.0013003407511860132, 0.0048688324168324471, 0.0040358500555157661, 0.0015775060746818781, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data24[48] = { 1403, 987, 3664, 883, 9685, 18234, 3674, 59, -550, -912, 1601, 777, 4352, 1296, 24624, 3436, 2136, -1553, -765, 4798, -1194, 13184, 12500, 12289, 6137, 64, 4706, 7133, 6183, -1042, 9759, 9643, 627, -768, 6608, 7783, -3343, 474, -320, 5442, 766, -674, -1183, 283, 1227, 5214, 737, 1237, };
const TfArray<1, int> tensor_dimension24 = { 1, { 48 } };
const TfArray<48, float> quant24_scale = { 48, { 0.0002372984163230285, 0.0007564108818769455, 0.00016910208796616644, 0.00024084580945782363, 0.00022140784130897373, 0.00022285128943622112, 0.00030905072344467044, 0.00022138559143058956, 0.00037549730041064322, 0.00045487150782719254, 0.00062519178027287126, 0.00030457726097665727, 0.00027071472140960395, 0.00056759215658530593, 0.00014538495452143252, 0.00033386275754310191, 0.00022856627765577286, 0.00024074235989246517, 0.000169966762769036, 0.0001747229543980211, 0.00044130077003501356, 0.00018800045654643327, 0.00028582615777850151, 0.00012832887296099216, 0.0002467310696374625, 0.00024932451196946204, 0.0014890048187226057, 0.00027058002888225019, 0.0002739340125117451, 0.00029188531334511936, 0.00027185416547581553, 0.00012699344370048493, 0.00059973372844979167, 0.00017178338021039963, 0.00055289198644459248, 0.00024357288202736527, 0.00041554789640940726, 0.00027467779000289738, 0.00026745969080366194, 0.00033140217419713736, 0.00015119282761588693, 0.0001864859223132953, 0.00027370170573703945, 0.00026370809064246714, 0.0015133130364120007, 0.0002702812198549509, 0.00025616431958042085, 0.0010370447998866439, } };
const TfArray<48, int> quant24_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data25[48*1*1*8] = { 
  /* [0][0][][] */ -127,13,-11,61,-57,57,26,-59, 
  /* [1][0][][] */ 20,29,18,22,6,-56,43,127, 
  /* [2][0][][] */ -29,6,1,-25,-127,-36,-7,-21, 
  /* [3][0][][] */ 103,1,-11,-127,-100,34,19,-28, 
  /* [4][0][][] */ -127,78,-11,28,39,-48,76,62, 
  /* [5][0][][] */ -127,-36,21,0,-112,3,-3,89, 
  /* [6][0][][] */ 5,-127,63,-24,10,1,-23,32, 
  /* [7][0][][] */ -59,-14,1,74,127,-20,-35,26, 
  /* [8][0][][] */ 30,11,-30,-127,5,-15,-25,-48, 
  /* [9][0][][] */ -48,-127,-35,-19,-19,121,-66,112, 
  /* [10][0][][] */ -116,-39,-11,64,-127,61,94,4, 
  /* [11][0][][] */ 75,-7,34,15,-47,-43,-47,-127, 
  /* [12][0][][] */ 23,2,42,-53,18,-100,127,101, 
  /* [13][0][][] */ 29,-44,-6,-35,110,127,100,-16, 
  /* [14][0][][] */ 127,35,4,32,-58,-50,8,9, 
  /* [15][0][][] */ -22,-127,-8,-18,-12,16,10,34, 
  /* [16][0][][] */ -55,-15,24,27,-127,22,11,9, 
  /* [17][0][][] */ -46,102,-111,18,35,-124,127,-39, 
  /* [18][0][][] */ 127,-20,-35,38,-76,34,19,88, 
  /* [19][0][][] */ 127,-53,-25,26,61,-11,63,58, 
  /* [20][0][][] */ 57,6,-38,127,-1,26,3,-35, 
  /* [21][0][][] */ 29,62,-27,29,-60,68,-87,-127, 
  /* [22][0][][] */ -127,1,2,24,-6,17,-52,-35, 
  /* [23][0][][] */ -30,-45,-3,37,-127,62,77,-23, 
  /* [24][0][][] */ 127,2,21,-13,-102,-3,11,27, 
  /* [25][0][][] */ 24,-7,7,-34,127,68,69,-39, 
  /* [26][0][][] */ 9,-82,19,-33,37,-127,62,-25, 
  /* [27][0][][] */ -19,-127,16,-26,-1,-55,43,8, 
  /* [28][0][][] */ -127,3,-22,24,20,26,58,2, 
  /* [29][0][][] */ -9,50,15,-5,4,23,-118,-127, 
  /* [30][0][][] */ 127,-19,10,-33,-38,16,-52,-40, 
  /* [31][0][][] */ 22,-55,89,-25,37,-116,127,109, 
  /* [32][0][][] */ -70,16,35,9,-127,-100,-82,71, 
  /* [33][0][][] */ -42,16,9,25,-127,-70,-48,32, 
  /* [34][0][][] */ 4,-127,54,-25,5,76,-62,84, 
  /* [35][0][][] */ -15,-34,-127,-19,-12,-58,41,-63, 
  /* [36][0][][] */ 21,127,73,33,-35,27,-62,-67, 
  /* [37][0][][] */ -127,38,28,-13,31,-38,8,-91, 
  /* [38][0][][] */ -127,-13,-41,-12,22,10,17,75, 
  /* [39][0][][] */ 19,0,83,-3,-27,-91,127,38, 
  /* [40][0][][] */ -17,-6,0,-37,-127,90,116,-6, 
  /* [41][0][][] */ -121,30,-4,-76,-127,-109,-75,49, 
  /* [42][0][][] */ -25,-127,-85,5,-10,49,-113,-38, 
  /* [43][0][][] */ -37,-24,-5,-127,67,64,39,12, 
  /* [44][0][][] */ 127,9,-4,-61,1,-38,2,48, 
  /* [45][0][][] */ -39,-127,-12,-42,19,-38,65,1, 
  /* [46][0][][] */ 112,-3,-4,-20,127,-50,-29,6, 
  /* [47][0][][] */ 122,-22,-18,127,6,32,-9,-35, 
};
const TfArray<4, int> tensor_dimension25 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant25_scale = { 48, { 0.00053247058531269431, 0.0016972997691482306, 0.00037944581708870828, 0.00054043054115027189, 0.0004968139692209661, 0.00050005287630483508, 0.00069347460521385074, 0.00049676402704790235, 0.00084257312119007111, 0.0010206798324361444, 0.0014028591103851795, 0.00068343663588166237, 0.00060745299560949206, 0.0012736121425405145, 0.00032622728031128645, 0.00074914994183927774, 0.000512876664288342, 0.00054019840899854898, 0.00038138605304993689, 0.00039205839857459068, 0.0009902286110445857, 0.00042185158235952258, 0.00064136128639802337, 0.00028795536491088569, 0.00055363640422001481, 0.00055945577332749963, 0.0033411572221666574, 0.00060715072322636843, 0.0006146766827441752, 0.00065495737362653017, 0.00061000976711511612, 0.00028495880542322993, 0.0013457341119647026, 0.00038546233554370701, 0.0012406265595927835, 0.00054654979612678289, 0.00093244214076548815, 0.00061634567100554705, 0.00060014904011040926, 0.00074362871237099171, 0.00033925948082469404, 0.00041845315718092024, 0.0006141554331406951, 0.00059173087356612086, 0.0033957019913941622, 0.0006064802291803062, 0.00057480356190353632, 0.0023270102683454752, } };
const TfArray<48, int> quant25_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data26[8] = { -37860, 20382, -14619, -11051, 8627, -1558, 32308, 50149, };
const TfArray<1, int> tensor_dimension26 = { 1, { 8 } };
const TfArray<8, float> quant26_scale = { 8, { 0.00052275828784331679, 0.00064430804923176765, 0.0015436942921951413, 0.0016096885083243251, 0.00076320621883496642, 0.00048214488197118044, 0.00064100045710802078, 0.0007478816551156342, } };
const TfArray<8, int> quant26_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data27[8*1*1*48] = { 
  /* [0][0][][] */ -32,-32,-62,1,5,-26,-19,-1,-99,89,-49,81,127,9,91,-13,19,-12,17,27,17,23,-30,-24,22,-83,30,59,-13,38,24,-9,15,-52,99,29,17,-38,-7,-23,107,-9,61,-11,-9,19,2,20, 
  /* [1][0][][] */ -14,17,127,5,0,-17,-17,-81,25,0,19,3,-6,27,-14,-106,17,-40,-19,8,-30,45,25,-17,5,-15,17,10,19,16,26,11,-1,9,13,4,-1,-49,62,-28,29,39,-18,27,-19,-10,40,0, 
  /* [2][0][][] */ 14,-33,22,-21,32,12,-1,-25,13,-12,-4,6,0,48,10,6,-31,127,-23,-24,-4,22,-22,0,102,-2,13,13,-17,-2,-2,-34,-19,-12,-6,6,2,0,-4,4,27,-30,-16,-3,5,27,-17,-27, 
  /* [3][0][][] */ 2,-94,-14,-1,2,-8,-8,8,9,-26,18,3,10,-4,47,2,-15,-9,-11,25,-1,24,-21,15,9,46,8,16,-2,8,127,-6,16,10,-18,-1,-11,-25,-26,21,-5,11,-5,16,-4,-17,6,34, 
  /* [4][0][][] */ -79,26,-10,1,6,-35,9,23,44,-46,20,-18,-40,7,-13,-3,20,23,10,31,24,-15,34,-8,-9,49,21,127,13,-8,-8,-32,-10,-118,-40,33,9,0,18,5,-45,-11,-1,31,-44,12,17,14, 
  /* [5][0][][] */ -36,3,0,-20,-45,23,-12,46,22,13,8,8,-10,-25,-3,39,-18,-97,8,-7,32,-40,9,53,14,0,-67,-39,-34,-9,16,-10,37,-78,1,-59,61,-7,-53,45,0,-53,12,-7,127,-13,-26,-10, 
  /* [6][0][][] */ -31,-21,-31,-18,28,-41,18,-14,-7,5,28,-6,-24,36,9,-37,2,-9,10,-40,-46,30,-16,-98,-7,-19,-66,-70,13,21,-3,-8,13,-45,-22,66,-62,-44,0,-56,-36,-4,19,27,127,-38,32,5, 
  /* [7][0][][] */ 24,28,-82,27,-33,-2,-10,34,-2,-9,69,-33,-14,-35,3,-15,-31,-127,63,-30,68,26,11,-58,15,-24,32,-4,-26,5,-37,-8,-22,52,2,-31,-12,-52,-29,-83,-15,-36,45,47,-20,1,-15,12, 
};
const TfArray<4, int> tensor_dimension27 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant27_scale = { 8, { 0.022217227146029472, 0.027383092790842056, 0.06560700386762619, 0.068411760032176971, 0.03243626281619072, 0.020491156727075577, 0.027242518961429596, 0.031784970313310623, } };
const TfArray<8, int> quant27_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data28[48] = { -53549, 359, 12353, 1340, 4879, -3385, 2138, 37099, 1641, 36301, -1787, 28799, -6648, -1297, 28838, 11360, 530, 25111, 34654, 11050, -936, -817, 419, 19725, -8044, 29433, 44951, 34473, 2923, 1795, -2952, 513, 788, 17678, -6930, 16609, -11910, 23783, -22524, 151336, 29955, 20904, 9907, -1218, 17818, 3127, 2252, -1454, };
const TfArray<1, int> tensor_dimension28 = { 1, { 48 } };
const TfArray<48, float> quant28_scale = { 48, { 0.00021418662799987942, 0.0002333623415324837, 0.00015379520482383668, 0.00020968233002349734, 0.00010584721167106181, 7.7803415479138494e-05, 0.00054863339755684137, 9.4409719167742878e-05, 0.00012049691576976329, 0.00013593357289209962, 8.1506630522198975e-05, 0.00014876779459882528, 0.00026425273972563446, 0.00018011305655818433, 8.4463259554468095e-05, 0.00013165858399588615, 0.00014941210974939167, 0.0001553948677610606, 7.2180839197244495e-05, 0.00013048648543190211, 0.00021442437719088048, 0.00021206695237196982, 0.0001477367477491498, 0.00010879075853154063, 0.00016125795082189143, 0.00012006433098576963, 0.00052790227346122265, 9.9262782896403223e-05, 0.00019673959468491375, 0.00041829037945717573, 0.00012405484449118376, 0.00022090546553954482, 0.00071147899143397808, 0.0001547317806398496, 0.00018215466116089374, 0.00015195203013718128, 0.00029552850173786283, 0.00011323218495817855, 0.00023908786533866078, 1.7360949641442858e-05, 0.00010561777889961377, 6.1623970395885408e-05, 0.00015206549142021686, 0.00012561549374368042, 0.00012829809566028416, 0.00012047591008013114, 0.00018265604740008712, 7.8271208622027189e-05, } };
const TfArray<48, int> quant28_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data29[1*3*3*48] = { 
  /* [0][0][][] */ 7,-2,21,105,3,81,-3,30,12,6,6,7,-9,-9,-47,9,-4,7,-24,-113,-7,-21,127,-8,-5,6,-8,7,-1,3,17,100,22,29,38,-28,1,35,-3,3,19,-74,-13,-12,18,3,-10,-11, 127,10,16,-127,31,87,10,13,122,127,7,44,-48,-26,6,11,127,-57,-60,-57,-99,26,-107,18,14,72,-32,-83,23,20,9,-123,6,-60,127,9,-39,-48,-2,119,-75,-100,-30,0,-36,-6,-127,26, -29,-2,8,13,2,63,4,18,28,9,-16,31,-11,-4,14,5,-105,28,1,76,-28,-10,-18,-5,-7,-58,-3,29,-15,4,2,-21,8,-22,20,-19,1,47,47,-13,52,36,-18,10,-44,4,-3,-5, 
  /* [0][1][][] */ 123,8,1,-97,14,-25,34,-16,8,8,-16,55,-8,-1,17,-33,-2,-51,-62,-84,9,-74,-122,-18,4,100,-17,-127,-5,30,13,-107,19,-50,-1,127,-4,61,-46,44,-60,-127,36,-94,-47,-14,-17,-5, 26,-127,-127,109,-127,-127,-127,-127,-127,-94,127,-127,127,127,36,-127,-84,127,127,-105,127,127,108,127,127,-127,-127,31,-127,-127,91,127,-127,127,-26,-43,127,-127,127,127,127,-78,127,127,127,-118,98,111, 53,7,49,-14,8,-63,46,20,-24,15,-107,-7,5,-41,127,6,61,-67,-72,86,16,-46,9,-34,0,5,-36,69,19,38,0,5,36,-41,12,67,-5,65,70,-14,-79,10,-86,-34,25,-14,-10,7, 
  /* [0][2][][] */ -47,-7,26,-18,6,34,-38,23,9,-24,8,35,5,-5,-39,18,5,22,-15,106,7,-34,-13,-10,-4,23,-1,49,-7,2,46,-29,-16,-40,-30,-40,-2,32,6,-20,11,-6,39,-41,-34,19,-14,17, 70,126,76,19,18,-18,122,37,18,-3,40,29,-3,-2,-93,26,-59,-57,-38,121,-36,48,11,20,31,-63,-39,28,78,1,127,24,91,-23,9,-36,-25,-15,-16,119,-26,-15,-41,44,20,-28,5,-127, -37,-3,5,-4,7,-6,-61,7,-14,-10,-41,-40,22,-9,-11,12,33,23,-10,-127,26,-10,3,-9,-7,12,-9,-56,-15,8,4,10,-17,89,-36,-23,-4,38,24,-65,6,8,-39,5,-44,127,-3,-3, 
};
const TfArray<4, int> tensor_dimension29 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant29_scale = { 48, { 0.0091029312461614609, 0.0099178990349173546, 0.0065362961031496525, 0.0089114988222718239, 0.0044985064305365086, 0.003306644968688488, 0.023316917940974236, 0.0040124128572642803, 0.0051211188547313213, 0.0057771764695644379, 0.0034640317317098379, 0.0063226311467587948, 0.011230740696191788, 0.0076548047363758087, 0.0035896885674446821, 0.0055954894050955772, 0.0063500143587589264, 0.0066042817197740078, 0.0030676855240017176, 0.0055456752888858318, 0.0091130360960960388, 0.0090128453448414803, 0.0062788114883005619, 0.0046236072666943073, 0.0068534626625478268, 0.0051027340814471245, 0.02243584580719471, 0.0042186682112514973, 0.0083614327013492584, 0.017777340486645699, 0.005272330716252327, 0.0093884821981191635, 0.030237855389714241, 0.0065761003643274307, 0.0077415728010237217, 0.0064579611644148827, 0.012559961527585983, 0.0048123677261173725, 0.010161234065890312, 0.00073784030973911285, 0.0044887554831802845, 0.0026190187782049179, 0.0064627830870449543, 0.0053386581130325794, 0.0054526692256331444, 0.0051202261820435524, 0.0077628819271922112, 0.0033265263773500919, } };
const TfArray<48, int> quant29_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data30[48] = { 80014, 11278, 7409, 9899, 2179, 22948, -2286, -286, 851, 2822, 4565, 531, 2246, -1021, 1320, -2522, 5736, 13869, -430, 28643, 6447, 5284, 8263, -632, 5171, 6826, 32025, 13081, -300, -3674, 185, 3535, -2948, 15276, 3541, 12640, 8673, 5952, 43102, 3317, -873, 3828, 1650, 5123, 5572, 3143, -2122, 3171, };
const TfArray<1, int> tensor_dimension30 = { 1, { 48 } };
const TfArray<48, float> quant30_scale = { 48, { 5.3605886932928115e-05, 0.0002064995642285794, 0.00020645596669055521, 0.00033233367139473557, 0.00098488177172839642, 0.00022060947958379984, 0.00079633714631199837, 0.00084806355880573392, 0.00057720748009160161, 0.00048790141590870917, 0.00050540146185085177, 0.00032484121038578451, 0.00042057072278112173, 0.00036762753734365106, 0.00038694633985869586, 0.0014420961961150169, 0.00026698215515352786, 0.00030238277395255864, 0.0013493556762114167, 9.2751804913859814e-05, 0.00020506237342488021, 0.00021814109641127288, 0.00048171950038522482, 0.00068389537045732141, 0.00023920406238175929, 0.00017536703671794385, 0.00012598020839504898, 0.00028214414487592876, 0.00047756906133145094, 0.00074035313446074724, 0.00038121649413369596, 0.00023484254779759794, 0.00068809330696240067, 0.00014564489538315684, 0.00030319165671244264, 0.00014790002023801208, 0.0004161263641435653, 0.0002424529375275597, 5.5341646657325327e-05, 0.0013976653572171926, 0.00067440012935549021, 0.0007286417530849576, 0.00031746955937705934, 0.00030604534549638629, 0.00019873090786859393, 0.00035805988591164351, 0.00050381867913529277, 0.00080900284228846431, } };
const TfArray<48, int> quant30_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data31[48*1*1*8] = { 
  /* [0][0][][] */ 105,53,53,20,127,23,-60,-42, 
  /* [1][0][][] */ -22,-7,23,127,6,-2,-8,23, 
  /* [2][0][][] */ 60,-127,-46,29,-18,-41,104,-27, 
  /* [3][0][][] */ 127,-7,6,-5,-18,-17,29,-7, 
  /* [4][0][][] */ 23,-38,127,5,-15,-77,-26,-89, 
  /* [5][0][][] */ 117,31,29,-27,127,59,-1,8, 
  /* [6][0][][] */ -33,127,8,89,1,55,-64,-42, 
  /* [7][0][][] */ -16,127,4,14,-6,-16,12,16, 
  /* [8][0][][] */ 127,20,-25,-29,-50,-51,11,0, 
  /* [9][0][][] */ -127,23,22,47,46,18,-15,4, 
  /* [10][0][][] */ -47,-8,-22,127,13,46,-31,0, 
  /* [11][0][][] */ -127,2,-16,-78,18,-3,4,-70, 
  /* [12][0][][] */ 127,39,23,-7,-68,-25,-3,-52, 
  /* [13][0][][] */ -2,98,-127,-32,-26,92,-79,106, 
  /* [14][0][][] */ -7,-40,18,127,32,22,-22,-34, 
  /* [15][0][][] */ -18,127,10,8,0,-22,-3,-40, 
  /* [16][0][][] */ -25,-95,-21,30,-7,-127,107,-64, 
  /* [17][0][][] */ 24,127,10,-20,-16,68,-99,-16, 
  /* [18][0][][] */ 1,24,-127,-6,32,76,-20,64, 
  /* [19][0][][] */ -45,-32,29,31,-127,5,47,67, 
  /* [20][0][][] */ -127,-51,1,-5,29,-24,62,-6, 
  /* [21][0][][] */ -25,20,11,8,-127,-19,30,5, 
  /* [22][0][][] */ -127,-12,-16,1,61,-32,6,47, 
  /* [23][0][][] */ -32,-8,-7,-1,-17,85,-127,-117, 
  /* [24][0][][] */ 0,31,-127,5,10,48,-10,91, 
  /* [25][0][][] */ 111,-19,-47,119,-127,-43,-2,-85, 
  /* [26][0][][] */ 9,-35,-1,1,-10,127,114,-32, 
  /* [27][0][][] */ 39,-6,15,16,127,31,1,-15, 
  /* [28][0][][] */ 38,83,-34,24,7,72,-20,127, 
  /* [29][0][][] */ -18,-18,-1,-5,22,112,-127,-72, 
  /* [30][0][][] */ 13,16,-2,-127,-11,9,-27,-40, 
  /* [31][0][][] */ -83,-16,-32,-25,-127,20,35,-19, 
  /* [32][0][][] */ -16,67,-7,-95,-20,18,-98,-127, 
  /* [33][0][][] */ -83,-5,-28,-1,-127,19,26,-5, 
  /* [34][0][][] */ -127,71,5,23,68,6,-11,16, 
  /* [35][0][][] */ -72,120,-71,6,39,-127,106,-52, 
  /* [36][0][][] */ 13,61,-19,-28,-16,68,-127,-30, 
  /* [37][0][][] */ 42,-24,24,37,5,-127,103,-3, 
  /* [38][0][][] */ -42,-127,38,-38,64,116,-30,85, 
  /* [39][0][][] */ -7,-127,-14,-5,-8,-24,-50,-119, 
  /* [40][0][][] */ 103,57,9,24,-30,14,-127,-63, 
  /* [41][0][][] */ 13,-127,37,9,16,68,-55,122, 
  /* [42][0][][] */ 55,-27,26,-127,-24,18,-6,-26, 
  /* [43][0][][] */ -91,-54,9,-127,25,-10,-29,27, 
  /* [44][0][][] */ 4,-55,1,19,-43,123,127,0, 
  /* [45][0][][] */ -127,-46,10,8,-8,-16,27,14, 
  /* [46][0][][] */ 40,104,127,-34,-22,-9,6,41, 
  /* [47][0][][] */ 19,-7,0,127,19,15,10,-17, 
};
const TfArray<4, int> tensor_dimension31 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant31_scale = { 48, { 0.00017485575517639518, 0.00067357596708461642, 0.00067343376576900482, 0.001084031187929213, 0.0032125620637089014, 0.0007196007645688951, 0.0025975529570132494, 0.0027662781067192554, 0.0018827792955562472, 0.0015914739342406392, 0.0016485567903146148, 0.0010595917701721191, 0.0013718495611101389, 0.0011991554638370872, 0.0012621709611266851, 0.0047039389610290527, 0.00087086268467828631, 0.00098633510060608387, 0.0044014309532940388, 0.00030254488228820264, 0.00066888803848996758, 0.00071154918987303972, 0.0015713092871010303, 0.0022307818289846182, 0.00078025396214798093, 0.00057202554307878017, 0.0004109318251721561, 0.00092031923122704029, 0.0015577710000798106, 0.002414940157905221, 0.0012434809468686581, 0.00076602725312113762, 0.0022444750647991896, 0.00047507556155323982, 0.00098897353745996952, 0.00048243152559734881, 0.0013573525939136744, 0.00079085142351686954, 0.0001805175852496177, 0.004559011198580265, 0.0021998095326125622, 0.0023767389357089996, 0.0010355463018640876, 0.0009982819901779294, 0.00064823555294424295, 0.0011679469607770443, 0.0016433941200375557, 0.0026388668920844793, } };
const TfArray<48, int> quant31_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data32[8] = { -7854, -21306, 34382, 26269, 1462, -4164, 34501, 13891, };
const TfArray<1, int> tensor_dimension32 = { 1, { 8 } };
const TfArray<8, float> quant32_scale = { 8, { 0.0010074240854009986, 0.00072361103957518935, 0.0010981553932651877, 0.0010744364699348807, 0.00096126244170591235, 0.00094843033002689481, 0.00086605804972350597, 0.00062235194491222501, } };
const TfArray<8, int> quant32_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data33[8*1*1*48] = { 
  /* [0][0][][] */ -2,-8,18,-91,11,35,7,11,-8,5,-2,-3,111,0,7,7,0,-1,-16,-1,87,-3,5,12,38,36,21,20,-4,15,13,-127,3,3,-6,2,-26,-2,-26,44,4,-29,-15,15,-6,2,-2,2, 
  /* [1][0][][] */ -36,-7,-3,-9,49,23,-33,72,22,12,-28,-26,8,0,23,35,0,47,16,-39,-7,29,127,20,-37,-4,50,1,29,-3,23,-16,2,13,-13,-24,8,-36,17,-1,4,-9,-90,-16,-37,3,-63,-103, 
  /* [2][0][][] */ -76,-1,5,12,38,3,19,14,0,57,11,-6,-4,0,23,54,0,12,-127,44,0,10,-4,-16,-32,5,25,19,20,32,32,5,-11,-21,-18,-11,11,-2,8,5,56,-18,-42,9,11,-76,21,7, 
  /* [3][0][][] */ 13,0,1,10,1,40,3,-4,63,19,-11,-11,12,0,-34,-7,0,-10,-21,11,8,-8,-1,-25,-4,-26,-16,-6,-5,8,13,-1,-42,40,-62,8,6,-2,-16,-127,4,10,10,-52,-5,-10,3,9, 
  /* [4][0][][] */ 7,-5,100,30,5,-35,8,-8,-2,-3,-11,-6,-76,0,-18,14,0,-10,-2,2,71,-6,3,-2,-8,40,3,40,-6,7,9,107,16,2,-6,0,30,1,-15,-18,-19,-127,17,0,7,-1,16,1, 
  /* [5][0][][] */ 5,62,-4,-23,4,44,24,14,-28,28,1,53,33,0,-127,-3,0,21,-43,27,-2,19,-12,47,-11,1,25,-9,-29,34,19,-15,54,41,-45,-1,6,14,-50,10,23,-5,-16,28,15,65,24,29, 
  /* [6][0][][] */ -25,-61,3,1,35,-45,-22,7,22,-27,-5,81,-4,0,-127,26,0,-17,36,-17,-3,-5,29,-25,30,1,3,-14,33,-12,-13,-9,93,-46,29,-2,-3,-22,-69,-14,-22,-17,1,-17,-13,-71,-20,-16, 
  /* [7][0][][] */ -112,-36,-19,0,127,32,74,21,14,22,25,-40,-17,0,72,101,0,-1,2,62,-3,-17,-34,35,25,4,41,10,56,61,68,3,1,-18,-36,-23,1,29,19,45,81,10,-17,-11,71,-4,69,77, 
};
const TfArray<4, int> tensor_dimension33 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant33_scale = { 8, { 0.042815525084733963, 0.030753469094634056, 0.046671602874994278, 0.045663550496101379, 0.040853653103113174, 0.040308289229869843, 0.036807466298341751, 0.026449955999851227, } };
const TfArray<8, int> quant33_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data34[48] = { 61678, 44318, 63434, 40008, -92, 12785, 2936, 28922, 25089, 31407, 26340, 3876, -43221, -127, 39660, 1204, -204, 47365, -562, 1954, -14290, 10536, 51917, 30340, -9277, 37338, 47848, 16998, -3240, 15803, -9049, -50168, 12713, 99263, 26629, 1415, 58638, 526, 151096, -23405, 15323, -29186, 1273, 103111, 1992, 73368, 723, -21719, };
const TfArray<1, int> tensor_dimension34 = { 1, { 48 } };
const TfArray<48, float> quant34_scale = { 48, { 9.6549840236548334e-05, 9.244443936040625e-05, 0.00016662121925037354, 0.0001115512422984466, 0.00010022192873293534, 0.00024054355162661523, 0.00013424511416815221, 5.4935746447881684e-05, 8.8334745669271797e-05, 3.0933657399145886e-05, 5.9486377722350881e-05, 2.5415703930775635e-05, 0.00016558408970013261, 0.005541567225009203, 6.2645412981510162e-05, 0.00018306914716959, 0.0027484172023832798, 1.8168360838899389e-05, 0.00013129643048159778, 0.00016168793081305921, 0.00010899167682509869, 0.0001207502355100587, 0.00011472959886305034, 3.6679284676210955e-05, 6.7362918343860656e-05, 7.9679601185489446e-05, 2.4974480766104534e-05, 3.7312205677153543e-05, 0.00016757904086261988, 6.0169510106788948e-05, 5.0795511924661696e-05, 0.00016457977471873164, 0.0001871557324193418, 1.063827130565187e-05, 9.191583376377821e-05, 0.00023381687060464174, 1.4466787433775607e-05, 0.00039148415089584887, 3.0564897315343842e-05, 8.3666047430597246e-05, 6.9593159423675388e-05, 0.00024406172451563179, 0.00011939797695958987, 9.5189425337594002e-06, 0.00011037017247872427, 8.0839221482165158e-05, 0.00020980885892640799, 0.00010430470138089731, } };
const TfArray<48, int> quant34_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data35[1*3*3*48] = { 
  /* [0][0][][] */ -41,-24,-6,-15,4,-38,-79,-69,-29,-56,5,63,34,-71,116,-47,-113,-82,37,-5,1,-71,-110,-79,-36,-118,-59,-19,69,15,94,23,-127,-92,-8,54,19,46,-127,76,-77,-14,106,-99,-2,-37,-86,111, 77,11,-26,-27,56,-127,-127,-79,61,-73,-118,110,34,-82,-1,60,-52,-113,57,9,10,-118,-127,-67,-5,-127,-115,-36,-56,23,-57,53,31,-127,62,81,12,74,-95,127,-127,4,125,-127,0,-25,-127,94, -31,44,6,-4,-69,-111,-61,-13,88,-6,-127,36,8,-71,-100,-13,-127,-24,25,11,-16,-73,-37,-24,-14,-32,-59,-7,-13,18,-20,10,105,-86,67,28,12,35,-5,16,-80,4,8,-77,-19,3,-56,12, 
  /* [0][1][][] */ -83,-127,-43,-45,-13,58,101,-109,-27,-114,-20,109,92,-64,26,-97,-121,-99,89,-76,44,-90,-104,-127,45,-110,-77,-40,127,-61,127,81,-42,-91,-13,79,-37,-79,-101,91,41,59,104,-100,-93,-116,82,117, 127,-78,-127,-127,127,43,97,-127,103,-127,-108,127,127,-14,-8,127,-60,-127,127,-127,127,-127,-120,-119,127,-93,-127,-127,-121,-127,-67,127,30,-114,127,127,-66,-127,-96,92,61,127,127,-112,-116,-127,122,127, -51,29,-63,-84,-125,-24,30,-37,127,-21,-71,31,56,-70,-24,-45,-37,-32,53,-73,59,-89,-38,-22,46,-2,-48,-50,16,-90,-32,20,28,-102,116,18,-37,-64,1,-15,37,54,6,-76,-60,-35,63,35, 
  /* [0][2][][] */ -59,-107,-37,-32,-3,37,-5,-36,-38,-55,-18,58,73,-127,-127,-67,-43,-19,59,76,53,-39,-14,-56,32,-55,-10,-55,76,31,74,63,109,-25,-34,-9,-97,36,-16,33,8,41,12,-53,95,-77,2,35, 88,-68,-91,-82,80,21,6,-46,48,-72,-30,55,79,-26,16,91,-24,-26,75,121,79,-52,-18,-59,92,-70,-19,-98,-52,41,-43,114,-17,-52,69,4,-127,52,-13,1,10,36,11,-62,127,-99,-14,39, -28,27,-45,-35,-84,-21,21,-7,59,-6,-7,28,29,-43,112,-31,-93,-2,32,59,72,-36,-2,-2,41,-4,-3,-59,-18,27,-18,41,-90,-48,66,1,-18,20,27,-38,5,37,-7,-15,62,-30,-6,15, 
};
const TfArray<4, int> tensor_dimension35 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant35_scale = { 48, { 0.0041033681482076645, 0.0039288885891437531, 0.0070814015343785286, 0.0047409278340637684, 0.0042594317346811295, 0.010223100893199444, 0.0057054171338677406, 0.0023347691167145967, 0.003754226490855217, 0.0013146804412826896, 0.0025281710550189018, 0.0010801673633977771, 0.0070373238995671272, 0.23551659286022186, 0.0026624300517141819, 0.0077804387547075748, 0.1168077290058136, 0.00077215535566210747, 0.0055800979025661945, 0.0068717370741069317, 0.0046321460977196693, 0.0051318849436938763, 0.004876007791608572, 0.0015588694950565696, 0.0028629240114241838, 0.003386382944881916, 0.0010614154161885381, 0.0015857687685638666, 0.0071221091784536839, 0.0025572041049599648, 0.002158809220418334, 0.0069946399889886379, 0.0079541187733411789, 0.00045212652185000479, 0.0039064227603375912, 0.0099372165277600288, 0.00061483844183385372, 0.016638075932860374, 0.0012990081449970603, 0.003555807052180171, 0.0029577091336250305, 0.01037262286990881, 0.0050744139589369297, 0.00040455505950376391, 0.0046907323412597179, 0.0034356669057160616, 0.0089168762788176537, 0.0044329497031867504, } };
const TfArray<48, int> quant35_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data36[48] = { 4977, 114, 13785, 7223, 10171, 10408, 11521, -93, 207, -387, 3470, 636, 15026, -112432936, 3668, 30280, -90761696, -158, -813, 11609, 4313, 0, -252, 585, 4644, -1077, 92, 831, 6344, 2228, 3422, 22492, 3725, 487, 445, -3000, 459, 8310, -286, 14690, 3126, 21168, -334, -146, 20850, 384, 14375, 5712, };
const TfArray<1, int> tensor_dimension36 = { 1, { 48 } };
const TfArray<48, float> quant36_scale = { 48, { 0.00040537110180594027, 0.00028931989800184965, 0.00023496751964557916, 0.0002550835779402405, 0.00020186025358270854, 0.0002059842663584277, 0.00033265459933318198, 0.001021410571411252, 0.00027444935403764248, 0.0020221772138029337, 0.00043221210944466293, 0.0014063477283343673, 0.00014107000606600195, 1.4424924588141153e-09, 0.0006903413450345397, 0.00011060004180762917, 1.4424924588141153e-09, 0.0040144524537026882, 0.00029271395760588348, 0.00033038898254744709, 0.00023971879272721708, 0.0026991427876055241, 0.0002061837149085477, 0.0012300934176892042, 0.000805797113571316, 0.00050718721468001604, 0.0013596777571365237, 0.001433206838555634, 0.00016782819875515997, 0.0012956247664988041, 0.00085959810530766845, 0.00010572779865469784, 0.00019084471568930894, 0.0065687727183103561, 0.0003621018840931356, 0.0004260168643668294, 0.003487718990072608, 0.00016443752974737436, 0.0015350832836702466, 0.00023425999097526073, 0.00091295508900657296, 0.00010862728231586516, 0.00033964758040383458, 0.0062926514074206352, 0.00023774047440383583, 0.00043567540706135333, 0.00019343501480761915, 0.0001479611819377169, } };
const TfArray<48, int> quant36_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data37[48*1*1*8] = { 
  /* [0][0][][] */ 27,-127,29,-56,27,-20,-49,40, 
  /* [1][0][][] */ 103,105,-6,-98,16,-3,-80,127, 
  /* [2][0][][] */ 30,7,-40,127,57,117,33,86, 
  /* [3][0][][] */ 71,97,-76,127,-87,-20,5,24, 
  /* [4][0][][] */ 6,-127,63,27,32,9,-36,-97, 
  /* [5][0][][] */ 6,-1,-49,41,-15,-21,59,127, 
  /* [6][0][][] */ 78,-5,-127,-85,125,31,30,-36, 
  /* [7][0][][] */ 127,35,30,-41,34,-13,62,-41, 
  /* [8][0][][] */ 19,-87,8,127,5,36,-5,-115, 
  /* [9][0][][] */ 97,-127,26,-2,-31,12,-95,78, 
  /* [10][0][][] */ -102,-52,-127,2,-9,33,-119,65, 
  /* [11][0][][] */ -9,-42,2,-108,-127,-15,32,-23, 
  /* [12][0][][] */ -9,25,-46,69,-85,-24,98,127, 
  /* [13][0][][] */ 0,0,0,0,0,0,0,0, 
  /* [14][0][][] */ -20,-53,3,34,38,127,59,26, 
  /* [15][0][][] */ 61,-15,2,-127,84,32,-50,93, 
  /* [16][0][][] */ 0,0,0,0,0,0,0,0, 
  /* [17][0][][] */ 30,41,127,4,0,-16,5,44, 
  /* [18][0][][] */ 78,-127,32,33,-1,19,-120,10, 
  /* [19][0][][] */ -127,-38,23,51,-74,-16,-75,54, 
  /* [20][0][][] */ 23,19,-46,86,-20,-127,5,56, 
  /* [21][0][][] */ 79,10,127,22,-19,-17,66,25, 
  /* [22][0][][] */ -91,3,-127,-6,7,-1,-90,-10, 
  /* [23][0][][] */ -83,127,-6,-45,8,4,96,-73, 
  /* [24][0][][] */ 14,-45,-40,75,-2,-64,91,127, 
  /* [25][0][][] */ -2,19,4,12,127,119,-89,-53, 
  /* [26][0][][] */ -97,-13,-127,-20,-10,25,-100,-19, 
  /* [27][0][][] */ -13,-26,-60,20,-47,127,51,62, 
  /* [28][0][][] */ -42,-8,-74,10,-1,127,113,125, 
  /* [29][0][][] */ 57,29,127,-13,-42,2,63,-23, 
  /* [30][0][][] */ -83,127,-44,-41,15,-48,97,-21, 
  /* [31][0][][] */ -34,-112,-43,0,27,-61,127,110, 
  /* [32][0][][] */ -4,-18,-29,127,-8,52,81,76, 
  /* [33][0][][] */ 1,63,-4,-125,12,-6,-9,127, 
  /* [34][0][][] */ -3,68,12,-80,40,0,3,127, 
  /* [35][0][][] */ 127,34,4,-28,9,48,75,-43, 
  /* [36][0][][] */ -127,-32,0,52,-34,13,-103,106, 
  /* [37][0][][] */ -18,-35,-22,63,59,127,66,71, 
  /* [38][0][][] */ 15,35,9,108,127,1,-10,34, 
  /* [39][0][][] */ -6,1,30,-112,15,-7,-34,127, 
  /* [40][0][][] */ 90,24,127,-8,-2,3,73,-25, 
  /* [41][0][][] */ 6,-34,-20,95,59,127,54,98, 
  /* [42][0][][] */ -68,-3,127,-9,-49,41,-40,81, 
  /* [43][0][][] */ 8,-49,-4,127,-19,-4,43,-119, 
  /* [44][0][][] */ 50,-23,-120,-127,85,-58,29,-106, 
  /* [45][0][][] */ -59,127,17,-68,13,12,56,-19, 
  /* [46][0][][] */ -116,-16,80,62,-14,54,-127,84, 
  /* [47][0][][] */ 102,12,127,-14,22,4,111,-7, 
};
const TfArray<4, int> tensor_dimension37 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant37_scale = { 48, { 0.0011063831625506282, 0.00078964349813759327, 0.00064129906240850687, 0.00069620198337361217, 0.00055093906121328473, 0.00056219479301944375, 0.00090791733236983418, 0.0027877455577254295, 0.00074905721703544259, 0.0055191470310091972, 0.0011796405306085944, 0.0038383579812943935, 0.00038502368261106312, 3.937008052901092e-09, 0.0018841550918295979, 0.00030186172807589173, 3.937008052901092e-09, 0.010956683196127415, 0.00079890695633366704, 0.0009017337579280138, 0.00065426673972979188, 0.0073667955584824085, 0.0005627391510643065, 0.0033573054242879152, 0.0021992695983499289, 0.0013842707267031074, 0.0037109812255948782, 0.0039116647094488144, 0.00045805508852936327, 0.0035361608024686575, 0.0023461091332137585, 0.00028856386779807508, 0.00052087428048253059, 0.017928212881088257, 0.00098828808404505253, 0.0011627317871898413, 0.0095190638676285744, 0.00044880088535137475, 0.0041897171176970005, 0.00063936796505004168, 0.0024917367845773697, 0.00029647746123373508, 0.00092700327513739467, 0.017174592241644859, 0.00064886728068813682, 0.0011890929890796542, 0.0005279440083540976, 0.00040383182931691408, } };
const TfArray<48, int> quant37_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data38[8] = { -1190, -44363, -8711, -12922, -27748, -3728, -27031, -29385, };
const TfArray<1, int> tensor_dimension38 = { 1, { 8 } };
const TfArray<8, float> quant38_scale = { 8, { 0.0016694949008524418, 0.001783255604095757, 0.0021352630574256182, 0.001067004632204771, 0.0012785420985892415, 0.0017770316917449236, 0.0014257457805797458, 0.00082777335774153471, } };
const TfArray<8, int> quant38_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data39[8*1*1*16] = { 
  /* [0][0][][] */ 0,-32,-1,0,127,-8,6,-4,-9,-109,-87,1,0,121,-7,0, 
  /* [1][0][][] */ 0,-25,-10,106,78,8,27,-5,9,-2,127,-46,0,34,-17,0, 
  /* [2][0][][] */ 0,-11,0,-5,-53,-8,14,7,-6,14,-29,5,0,127,-3,0, 
  /* [3][0][][] */ 0,3,-19,-127,76,25,70,7,8,58,17,39,0,-4,14,0, 
  /* [4][0][][] */ 0,37,-28,26,-51,21,127,16,-8,-59,13,1,0,-16,19,0, 
  /* [5][0][][] */ 0,-12,-12,-5,-20,-27,-4,20,-6,16,-8,-44,0,-4,127,0, 
  /* [6][0][][] */ 0,19,-5,7,49,-23,-20,3,-9,-93,104,64,0,127,54,0, 
  /* [7][0][][] */ 0,37,-16,127,14,-20,18,5,-10,84,-60,79,0,-2,54,0, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 8,1,1,16 } };
const TfArray<8, float> quant39_scale = { 8, { 0.070953533053398132, 0.075788363814353943, 0.090748675167560577, 0.045347698032855988, 0.054338037967681885, 0.075523845851421356, 0.060594193637371063, 0.035180367529392242, } };
const TfArray<8, int> quant39_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data40[16] = { -161, 33024, 135628, 14523, 14493, 46514, 19113, 72565, -23258, 8753, 31404, 12545, -445, 26144, 15206, -107, };
const TfArray<1, int> tensor_dimension40 = { 1, { 16 } };
const TfArray<16, float> quant40_scale = { 16, { 0.0018688903655856848, 7.9743382229935378e-05, 2.9124101274646819e-05, 0.00023703281476628035, 0.00013203757407609373, 7.022448698990047e-05, 0.00026375442394055426, 5.420263551059179e-05, 1.523600712971529e-05, 0.00020350927661638707, 0.00017240925808437169, 0.00057561032008379698, 0.00072724185883998871, 0.00025248643942177296, 0.00014145806198939681, 0.003907486330717802, } };
const TfArray<16, int> quant40_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data41[1*3*3*16] = { 
  /* [0][0][][] */ -108,18,-84,-127,38,-68,80,-75,-90,-3,-7,28,-127,5,54,-73, 51,24,-127,127,127,-127,127,-127,-85,127,-127,50,-105,6,127,-25, 24,-25,87,-2,-73,69,-94,80,-95,-27,4,-14,61,1,-102,-29, 
  /* [0][1][][] */ -127,127,-25,13,-44,16,-28,15,-27,1,3,-109,-49,8,-30,-14, -78,-42,-59,-15,-8,-25,8,-27,-107,-88,21,-14,-104,-127,1,23, 14,0,61,2,2,35,-25,35,-127,7,-1,2,-21,12,-4,43, 
  /* [0][2][][] */ -115,-73,64,2,-7,39,-39,53,-75,1,0,3,40,2,-27,23, 23,-5,28,-2,-28,41,-34,21,-123,-13,0,82,-58,0,-28,-111, 21,-8,16,0,4,15,9,23,-115,5,0,-127,107,3,17,-127, 
};
const TfArray<4, int> tensor_dimension41 = { 4, { 1,3,3,16 } };
const TfArray<16, float> quant41_scale = { 16, { 0.079427838325500488, 0.0033890937920659781, 0.0012377742677927017, 0.010073894634842873, 0.0056115966290235519, 0.0029845405369997025, 0.011209563352167606, 0.0023036119528114796, 0.00064753030892461538, 0.008649144321680069, 0.0073273936286568642, 0.024463439360260963, 0.030907778069376945, 0.010730673559010029, 0.0060119675472378731, 0.16606816649436951, } };
const TfArray<16, int> quant41_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data42[16] = { -1073741824, -19777, -51684, 45367, 343888, -19420, 89933, -833, -282046, 49331, 51308, 439304, -1073741824, 71290, 79873, -1073741824, };
const TfArray<1, int> tensor_dimension42 = { 1, { 16 } };
const TfArray<16, float> quant42_scale = { 16, { 1.3102037232926023e-09, 0.00016612926265224814, 0.00019351631635800004, 3.0932103982195258e-05, 8.6099671534611844e-06, 0.00014296390872914344, 3.7702793633798137e-05, 0.0002586685586720705, 4.9130771913041826e-06, 4.6427016059169546e-05, 5.9456640883581713e-05, 1.0826742254721466e-05, 1.1533876076441629e-09, 5.3206182201392949e-05, 2.8558384656207636e-05, 1.243374708748135e-10, } };
const TfArray<16, int> quant42_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data43[16*3*3*3] = { 
  /* [0][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [0][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [0][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [1][0][][] */ 78,17,50, 16,-6,36, -127,-120,-84, 
  /* [1][1][][] */ 22,12,15, -10,19,14, 16,-17,15, 
  /* [1][2][][] */ 8,33,12, 7,22,19, 60,-2,55, 
  /* [2][0][][] */ 2,-34,-43, 63,109,-33, 26,-65,-23, 
  /* [2][1][][] */ -4,-6,-36, 60,127,-66, 6,-23,-38, 
  /* [2][2][][] */ 72,-90,-9, 88,-65,-56, 54,-76,-12, 
  /* [3][0][][] */ 12,37,-10, -2,81,18, -30,-24,-9, 
  /* [3][1][][] */ 45,64,-5, 67,127,25, -40,-56,-4, 
  /* [3][2][][] */ 27,30,-5, 34,31,3, -14,-19,-4, 
  /* [4][0][][] */ 41,64,20, -3,56,15, 2,21,24, 
  /* [4][1][][] */ 45,64,85, 26,74,62, 56,72,10, 
  /* [4][2][][] */ 68,81,71, 73,127,45, 11,54,49, 
  /* [5][0][][] */ 12,2,-127, 19,20,-112, 16,49,-50, 
  /* [5][1][][] */ 17,-37,-124, 23,-30,-122, 20,33,-45, 
  /* [5][2][][] */ 13,22,-20, 24,15,-29, 17,34,-28, 
  /* [6][0][][] */ 38,-58,38, 67,-86,45, 14,-25,8, 
  /* [6][1][][] */ 50,-96,66, 86,-127,77, 3,-35,15, 
  /* [6][2][][] */ 25,-35,13, 22,-45,26, -20,1,-5, 
  /* [7][0][][] */ -15,30,16, -103,-22,8, -37,10,2, 
  /* [7][1][][] */ -2,3,7, -127,-84,-6, -27,-21,-7, 
  /* [7][2][][] */ -12,40,1, -5,18,4, -21,23,-5, 
  /* [8][0][][] */ 127,127,126, 126,127,125, 126,127,125, 
  /* [8][1][][] */ 127,127,125, 126,127,125, 126,127,125, 
  /* [8][2][][] */ 126,127,125, 126,127,125, 126,127,125, 
  /* [9][0][][] */ -17,4,-8, -19,-10,-14, -9,-6,-24, 
  /* [9][1][][] */ 97,127,-21, 59,122,1, -19,13,14, 
  /* [9][2][][] */ -32,-23,4, -4,-32,-17, 11,5,-28, 
  /* [10][0][][] */ -24,-80,-18, 34,95,20, -8,-11,-2, 
  /* [10][1][][] */ -58,-100,-14, 78,127,15, -16,-24,1, 
  /* [10][2][][] */ -33,-18,0, 34,24,-12, -10,0,8, 
  /* [11][0][][] */ 20,12,24, 35,-2,27, 39,-41,-8, 
  /* [11][1][][] */ -1,2,14, 8,-11,0, 26,-7,-6, 
  /* [11][2][][] */ 26,2,-29, 120,127,78, 6,45,-1, 
  /* [12][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [12][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [12][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [13][0][][] */ -49,-96,-21, -59,-110,-28, -6,-16,-8, 
  /* [13][1][][] */ 63,115,12, 60,127,21, 10,17,8, 
  /* [13][2][][] */ -7,-19,-1, 3,-18,-5, 3,5,-7, 
  /* [14][0][][] */ 53,-3,-32, 81,-35,-51, 26,-24,-20, 
  /* [14][1][][] */ 95,-14,-67, 127,-43,-85, 57,-32,-30, 
  /* [14][2][][] */ 62,-7,-38, 73,-23,-46, 22,-20,-11, 
  /* [15][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [15][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [15][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 16,3,3,3 } };
const TfArray<16, float> quant43_scale = { 16, { 3.3410194077987398e-07, 0.042362958192825317, 0.049346659332513809, 0.0078876856714487076, 0.0021955415140837431, 0.036455795168876648, 0.0096142115071415901, 0.065960481762886047, 0.0012528345687314868, 0.011838888749480247, 0.015161442570388317, 0.0027608191594481468, 2.9411381774480105e-07, 0.013567575253546238, 0.0072823874652385712, 3.1706054670621597e-08, } };
const TfArray<16, int> quant43_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,24,24,16 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,24,24,16 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.36639305949211121, } };
const TfArray<1, int> quant46_zero = { 1, { 15 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant47_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant47_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,25,25,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant50_scale = { 1, { 0.30657204985618591, } };
const TfArray<1, int> quant50_zero = { 1, { 24 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant51_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant51_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant53_scale = { 1, { 0.34455075860023499, } };
const TfArray<1, int> quant53_zero = { 1, { -24 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.44565543532371521, } };
const TfArray<1, int> quant54_zero = { 1, { 8 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant55_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant55_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,13,13,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,6,6,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,6,6,16 } };
const TfArray<1, float> quant58_scale = { 1, { 0.27396637201309204, } };
const TfArray<1, int> quant58_zero = { 1, { -15 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,6,6,96 } };
const TfArray<1, float> quant59_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant59_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,6,6,96 } };
const TfArray<1, float> quant60_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,6,6,16 } };
const TfArray<1, float> quant61_scale = { 1, { 0.20089587569236755, } };
const TfArray<1, int> quant61_zero = { 1, { -23 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,6,6,16 } };
const TfArray<1, float> quant62_scale = { 1, { 0.30756419897079468, } };
const TfArray<1, int> quant62_zero = { 1, { -8 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,6,6,96 } };
const TfArray<1, float> quant63_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant63_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,6,6,96 } };
const TfArray<1, float> quant64_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,6,6,16 } };
const TfArray<1, float> quant65_scale = { 1, { 0.26430994272232056, } };
const TfArray<1, int> quant65_zero = { 1, { -1 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,6,6,16 } };
const TfArray<1, float> quant66_scale = { 1, { 0.33786189556121826, } };
const TfArray<1, int> quant66_zero = { 1, { 9 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,6,6,96 } };
const TfArray<1, float> quant67_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant67_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,6,6,32 } };
const TfArray<1, float> quant68_scale = { 1, { 0.076561629772186279, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,6,6,4 } };
const TfArray<1, float> quant69_scale = { 1, { 0.10705821961164474, } };
const TfArray<1, int> quant69_zero = { 1, { 24 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,6,6,4 } };
const TfArray<1, float> quant70_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant70_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,43,42 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,41,40 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,39,38 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 46,37,36 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfArray<2, int> inputs4 = { 2, { 47,1 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfLiteDepthwiseConvParams opdata5 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 48,35,34 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteConvParams opdata6 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,33,32 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,31,30 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteDepthwiseConvParams opdata8 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,29,28 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,27,26 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteAddParams opdata10 = { kTfLiteActNone };
const TfArray<2, int> inputs10 = { 2, { 50,53 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteConvParams opdata11 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs11 = { 3, { 54,25,24 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfArray<2, int> inputs12 = { 2, { 55,1 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfLiteDepthwiseConvParams opdata13 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 56,23,22 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteConvParams opdata14 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,21,20 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,19,18 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteDepthwiseConvParams opdata16 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,17,16 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteConvParams opdata17 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,15,14 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteAddParams opdata18 = { kTfLiteActNone };
const TfArray<2, int> inputs18 = { 2, { 58,61 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteConvParams opdata19 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs19 = { 3, { 62,13,12 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteDepthwiseConvParams opdata20 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,11,10 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteConvParams opdata21 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,9,8 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteAddParams opdata22 = { kTfLiteActNone };
const TfArray<2, int> inputs22 = { 2, { 62,65 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteConvParams opdata23 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs23 = { 3, { 66,7,6 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,5,4 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,3,2 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteSoftmaxParams opdata26 = { 1 };
const TfArray<1, int> inputs26 = { 1, { 69 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 16, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant2))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension10, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data12, (TfLiteIntArray*)&g0::tensor_dimension12, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data13, (TfLiteIntArray*)&g0::tensor_dimension13, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data14, (TfLiteIntArray*)&g0::tensor_dimension14, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data15, (TfLiteIntArray*)&g0::tensor_dimension15, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data16, (TfLiteIntArray*)&g0::tensor_dimension16, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data17, (TfLiteIntArray*)&g0::tensor_dimension17, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data18, (TfLiteIntArray*)&g0::tensor_dimension18, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data19, (TfLiteIntArray*)&g0::tensor_dimension19, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data20, (TfLiteIntArray*)&g0::tensor_dimension20, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data21, (TfLiteIntArray*)&g0::tensor_dimension21, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data22, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data23, (TfLiteIntArray*)&g0::tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant23))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data24, (TfLiteIntArray*)&g0::tensor_dimension24, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant24))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data25, (TfLiteIntArray*)&g0::tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant25))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data26, (TfLiteIntArray*)&g0::tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant26))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data27, (TfLiteIntArray*)&g0::tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant27))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data28, (TfLiteIntArray*)&g0::tensor_dimension28, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant28))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data29, (TfLiteIntArray*)&g0::tensor_dimension29, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant29))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data30, (TfLiteIntArray*)&g0::tensor_dimension30, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant30))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data31, (TfLiteIntArray*)&g0::tensor_dimension31, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant31))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data32, (TfLiteIntArray*)&g0::tensor_dimension32, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant32))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data33, (TfLiteIntArray*)&g0::tensor_dimension33, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant33))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data34, (TfLiteIntArray*)&g0::tensor_dimension34, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant34))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data35, (TfLiteIntArray*)&g0::tensor_dimension35, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant35))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data36, (TfLiteIntArray*)&g0::tensor_dimension36, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant36))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data37, (TfLiteIntArray*)&g0::tensor_dimension37, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant37))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data38, (TfLiteIntArray*)&g0::tensor_dimension38, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant38))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data39, (TfLiteIntArray*)&g0::tensor_dimension39, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant39))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data40, (TfLiteIntArray*)&g0::tensor_dimension40, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant40))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data41, (TfLiteIntArray*)&g0::tensor_dimension41, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant41))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data42, (TfLiteIntArray*)&g0::tensor_dimension42, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant42))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data43, (TfLiteIntArray*)&g0::tensor_dimension43, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant43))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 9216), (TfLiteIntArray*)&g0::tensor_dimension44, 9216, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension45, 9216, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant45))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 9216), (TfLiteIntArray*)&g0::tensor_dimension46, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant46))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension47, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant47))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension48, 30000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant48))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension49, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant49))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension50, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant50))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 6912), (TfLiteIntArray*)&g0::tensor_dimension51, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant51))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension52, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant52))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 6912), (TfLiteIntArray*)&g0::tensor_dimension53, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant53))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension54, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant54))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 8112), (TfLiteIntArray*)&g0::tensor_dimension55, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant55))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension56, 8112, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant56))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 8112), (TfLiteIntArray*)&g0::tensor_dimension57, 1728, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant57))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 9840), (TfLiteIntArray*)&g0::tensor_dimension58, 576, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant58))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 3456), (TfLiteIntArray*)&g0::tensor_dimension59, 3456, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant59))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension60, 3456, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant60))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 3456), (TfLiteIntArray*)&g0::tensor_dimension61, 576, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant61))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 8640), (TfLiteIntArray*)&g0::tensor_dimension62, 576, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant62))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 3456), (TfLiteIntArray*)&g0::tensor_dimension63, 3456, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant63))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension64, 3456, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant64))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 4032), (TfLiteIntArray*)&g0::tensor_dimension65, 576, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant65))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 3456), (TfLiteIntArray*)&g0::tensor_dimension66, 576, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant66))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension67, 3456, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant67))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 3456), (TfLiteIntArray*)&g0::tensor_dimension68, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant68))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 144), (TfLiteIntArray*)&g0::tensor_dimension69, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant69))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension70, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant70))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 71, };
const size_t tflNodes_subgraph_index[] = {0, 27, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  70, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_3_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 71;
  for (size_t i = 0; i < 71; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_invoke() {
  for (size_t i = 0; i < 27; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
